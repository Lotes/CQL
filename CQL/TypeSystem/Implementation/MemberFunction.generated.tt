<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Reflection;
using CQL.SyntaxTree;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CQL.TypeSystem.Implementation
{	
	/// <summary>
    /// Types wrapping foreign member function.
    /// </summary>
    /// <typeparam name="TThis"></typeparam>
    /// <typeparam name="TReturn"></typeparam>
	public class ForeignMemberFunction<TThis, TReturn> : ForeignMemberFunction
    {
		/// <summary>
        /// Creates a foreign member function.
        /// </summary>
        /// <param name="body"></param>
        public ForeignMemberFunction(Func<TThis, TReturn> body) : base(typeof(TThis), new Type[0], typeof(TReturn), body)
        {
        }
    }
	<#
	const int MAX = 15; 
	Func<int, Func<string, string>, string> getSequence = (index, convert) =>
	{
		var count = index;
		var sequence = new LinkedList<string>();
		while(count > 0)
		{
			sequence.AddLast(convert((index-count+1).ToString()));
			count--;
		}
		return string.Join(", ", sequence);
	};

	for(var index = 1; index<=MAX; index++) 
	{
		var types = getSequence(index, str => "T"+str);
		var typeofs = getSequence(index, str => "typeof(T"+str+")");
	#>/// <summary>
    /// Types wrapping foreign member function.
    /// </summary>
    /// <typeparam name="TThis"></typeparam>
    <#
	for(var pIndex=1; pIndex<=index; pIndex++)
	{
	#>/// <typeparam name="T<#=pIndex#>"></typeparam>
    <#
	}
	#>/// <typeparam name="TReturn"></typeparam>
	public class ForeignMemberFunction<TThis, <#=types#>, TReturn> : ForeignMemberFunction
    {
		/// <summary>
        /// Creates a foreign member function.
        /// </summary>
        /// <param name="body"></param>
        public ForeignMemberFunction(Func<TThis, <#=types#>, TReturn> body) : base(typeof(TThis), new[] { <#=typeofs#> }, typeof(TReturn), body)
        {
        }
    }
	<#
	}

	for(var index = 0; index<=MAX; index++) 
	{
		var types = getSequence(index, str => "T"+str);
		if(!string.IsNullOrEmpty(types))
			types+=",";
		var typeofs = getSequence(index, str => "typeof(T"+str+")");
	#>/// <summary>
    /// Types wrapping native member function.
    /// </summary>
    /// <typeparam name="TThis"></typeparam>
    <#
	for(var pIndex=1; pIndex<=index; pIndex++)
	{
	#>/// <typeparam name="T<#=pIndex#>"></typeparam>
    <#
	}
	#>/// <typeparam name="TReturn"></typeparam>
	public class NativeMemberFunction<TThis, <#=types#> TReturn> : NativeMemberFunction
    {
        /// <summary>
        /// Creates a native member function.
        /// </summary>
        /// <param name="info"></param>
        public NativeMemberFunction(MethodInfo info) : base(typeof(TThis), info)
        {
        }
    }
	<#
	}
	#>/// <summary>
    /// Extensions for native member functions.
    /// </summary>
	public static class NativeMemberFunctionExtensions
	{
		private static Dictionary<int, Type> classes = new Dictionary<int, Type>()
		{
		<#
		for(var index = 0; index<=MAX; index++) 
		{
			var commas = getSequence(index, str => "");
			if(index > 0)
				commas += ",";
		#>
			{<#=index#>, typeof(NativeMemberFunction<,<#=commas#>>)},
		<#
		}
		#>	
		};
		/// <summary>
        /// Converts a MethodInfo into a native member function.
        /// </summary>
        /// <param name="this"></param>
        /// <param name="info"></param>
        /// <returns></returns>
		public static IMemberFunction CreateByMethodInfo(Type @this, MethodInfo info)
		{
            var parameterTypes = info.GetParameters().Select(p => p.ParameterType).ToArray();
            var @class = classes[parameterTypes.Length];
            var genericClass = @class.MakeGenericType(new[] { @this }.Concat(parameterTypes).Concat(new[] { info.ReturnType.Unvoid() }).ToArray());
            return (IMemberFunction)Activator.CreateInstance(genericClass, info);
		}
	}
}