<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CQL</name>
    </assembly>
    <members>
        <member name="T:CQL.AutoCompletion.AutoCompletionSuggester">
            <summary>
            Default implementation of <see cref="T:CQL.AutoCompletion.IAutoCompletionSuggester"/>.
            </summary>
        </member>
        <member name="M:CQL.AutoCompletion.AutoCompletionSuggester.#ctor(CQL.Contexts.IEvaluationScope)">
            <summary>
            Creates an auto completion suggester from the evaluation scope.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:CQL.AutoCompletion.AutoCompletionSuggester.GetSuggestions(System.String)">
            <summary>
            Given the code, let the suggester provide next tokens (suggestions).
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.AutoCompletion.Extensions">
            <summary>
            Auto completion extensions.
            </summary>
        </member>
        <member name="F:CQL.AutoCompletion.Extensions.TokenType_Caret">
            <summary>
            Special id for the caret.
            </summary>
        </member>
        <member name="M:CQL.AutoCompletion.Extensions.ToList(CQL.CQLLexer)">
            <summary>
            Converts lexer processings into a set of resulting tokens.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.AutoCompletion.IAutoCompletionSuggester">
            <summary>
            Interface providing suggestion on incomplete code.
            </summary>
        </member>
        <member name="M:CQL.AutoCompletion.IAutoCompletionSuggester.GetSuggestions(System.String)">
            <summary>
            Returns all possible parts, suggestions, how to continue the code.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.AutoCompletion.MyTokenStream">
            <summary>
            Helper class for handling the token stream.
            </summary>
        </member>
        <member name="M:CQL.AutoCompletion.MyTokenStream.#ctor(System.Collections.Generic.IEnumerable{Antlr4.Runtime.IToken},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="tokens"></param>
            <param name="start"></param>
        </member>
        <member name="M:CQL.AutoCompletion.MyTokenStream.Next">
            <summary>
            Reads the next token. If the end is reached the type will be -1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.AutoCompletion.MyTokenStream.NextNext">
            <summary>
            Same as Next(). But returns the token ofter the next token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.AutoCompletion.MyTokenStream.AtCaret">
            <summary>
            Returns true, if the cursor is at the caret.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.AutoCompletion.MyTokenStream.Move">
            <summary>
            Forks a stream from current position.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CQL.AutoCompletion.ParserStack">
            <summary>
            The parser stack is a helper class. It helps to find the right rule state.
            Different states have different suggestions.
            </summary>
        </member>
        <member name="M:CQL.AutoCompletion.ParserStack.IsCompatibleWith(Antlr4.Runtime.Atn.ATNState,CQL.AutoCompletion.ParserStack)">
            <summary>
            Checks whether the ATNState is compatiple with the given stack.
            </summary>
            <param name="state"></param>
            <param name="parserStack"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.AutoCompletion.ParserStack.#ctor(System.Collections.Generic.IEnumerable{Antlr4.Runtime.Atn.ATNState})">
            <summary>
            Constructor.
            </summary>
            <param name="states"></param>
        </member>
        <member name="P:CQL.AutoCompletion.ParserStack.Top">
            <summary>
            Tip of the stack.
            </summary>
        </member>
        <member name="M:CQL.AutoCompletion.ParserStack.Process(Antlr4.Runtime.Atn.ATNState)">
            <summary>
            One step of reading in ATNState.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.AutoCompletion.Suggestion">
            <summary>
            A suggestion from the AutoCompleteSuggester.
            </summary>
        </member>
        <member name="M:CQL.AutoCompletion.Suggestion.#ctor(CQL.AutoCompletion.SuggestionType,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="suggestionType"></param>
            <param name="position"></param>
            <param name="selectionLength"></param>
            <param name="text"></param>
            <param name="usage"></param>
        </member>
        <member name="P:CQL.AutoCompletion.Suggestion.Position">
            <summary>
            ??? TODO
            </summary>
        </member>
        <member name="P:CQL.AutoCompletion.Suggestion.SelectionLength">
            <summary>
            ??? TODO
            </summary>
        </member>
        <member name="P:CQL.AutoCompletion.Suggestion.Text">
            <summary>
            Text to be inserted when coosed by user.
            </summary>
        </member>
        <member name="P:CQL.AutoCompletion.Suggestion.SuggestionType">
            <summary>
            Type of this suggestion.
            </summary>
        </member>
        <member name="P:CQL.AutoCompletion.Suggestion.Usage">
            <summary>
            User documentation
            </summary>
        </member>
        <member name="M:CQL.AutoCompletion.Suggestion.Equals(System.Object)">
            <summary>
            Equals...
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.AutoCompletion.Suggestion.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns></returns>
        </member>
        <member name="T:CQL.AutoCompletion.SuggestionType">
            <summary>
            Types of suggestion answers
            </summary>
        </member>
        <member name="F:CQL.AutoCompletion.SuggestionType.Token">
            <summary>
            Operators
            </summary>
        </member>
        <member name="F:CQL.AutoCompletion.SuggestionType.Variable">
            <summary>
            Variable names
            </summary>
        </member>
        <member name="F:CQL.AutoCompletion.SuggestionType.Function">
            <summary>
            Function names
            </summary>
        </member>
        <member name="F:CQL.AutoCompletion.SuggestionType.Type">
            <summary>
            Type names
            </summary>
        </member>
        <member name="T:CQL.AutoCompletion.Token">
            <summary>
            Token like operators or parentheses.
            </summary>
        </member>
        <member name="M:CQL.AutoCompletion.Token.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name"></param>
            <param name="usage"></param>
        </member>
        <member name="P:CQL.AutoCompletion.Token.Name">
            <summary>
            Name of the token.
            </summary>
        </member>
        <member name="P:CQL.AutoCompletion.Token.Usage">
            <summary>
            What does they mean?
            </summary>
        </member>
        <member name="T:CQL.Contexts.IEvaluationScope">
            <summary>
            An evaluation scope contains all variables (name and value) for user accessible objects during evaluation (runtime object).
            </summary>
        </member>
        <member name="T:CQL.Contexts.Implementation.EvaluationScope">
            <summary>
            Default implementation of <see cref="T:CQL.Contexts.IEvaluationScope"/>
            </summary>
        </member>
        <member name="M:CQL.Contexts.Implementation.EvaluationScope.#ctor(CQL.TypeSystem.ITypeSystem,CQL.Contexts.IEvaluationScope)">
            <summary>
            Creates an empty evaluation scope.
            </summary>
            <param name="system"></param>
            <param name="parent"></param>
        </member>
        <member name="M:CQL.Contexts.Implementation.EvaluationScope.GetPropertyValue(System.Object,CQL.TypeSystem.IProperty)">
            <summary>
            Get the property value of a THIS value.
            </summary>
            <param name="value">THIS</param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.Implementation.EvaluationScope.GetValueType(System.Object)">
            <summary>
            Get the type of a value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:CQL.Contexts.Implementation.EvaluationScope.Parent">
            <summary>
            Parent of the scope. If a lookup in this scope fails, search continues in the parent scope.
            </summary>
        </member>
        <member name="P:CQL.Contexts.Implementation.EvaluationScope.TypeSystem">
            <summary>
            The typesystem applied to this scope.
            </summary>
        </member>
        <member name="M:CQL.Contexts.Implementation.EvaluationScope.DefineVariable(System.String,System.Object)">
            <summary>
            Defines a variable in this scope.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.Implementation.EvaluationScope.TryGetVariable(System.String,CQL.Contexts.IVariableDefinition@)">
            <summary>
            Lookups a variable in this and parent scopes. Returns TRUE and a variable if found, FALSE otherwise.
            </summary>
            <param name="name"></param>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.Implementation.EvaluationScope.GetEnumerator">
            <summary>
            Enumerator over this scope.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CQL.Contexts.Implementation.ValidationScope">
            <summary>
            Default implementation of <see cref="T:CQL.Contexts.IValidationScope"/>
            </summary>
        </member>
        <member name="M:CQL.Contexts.Implementation.ValidationScope.#ctor(CQL.TypeSystem.ITypeSystem,CQL.Contexts.IValidationScope)">
            <summary>
            Creates an empty validation scope.
            </summary>
            <param name="system"></param>
            <param name="parent"></param>
        </member>
        <member name="P:CQL.Contexts.Implementation.ValidationScope.TypeSystem">
            <summary>
            Returns the applied type system.
            </summary>
        </member>
        <member name="P:CQL.Contexts.Implementation.ValidationScope.Parent">
            <summary>
            Returns the optional parent scope (can be null).
            </summary>
        </member>
        <member name="M:CQL.Contexts.Implementation.ValidationScope.DefineVariable(System.String,System.Type)">
            <summary>
            Defines a variable with name and type.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.Implementation.ValidationScope.GetEnumerator">
            <summary>
            Returns variable enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.Implementation.ValidationScope.GetPropertyValue(System.Type,CQL.TypeSystem.IProperty)">
            <summary>
            Returns the type of a property.
            </summary>
            <param name="value"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.Implementation.ValidationScope.GetValueType(System.Type)">
            <summary>
            Returns the type itself...
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.Implementation.ValidationScope.TryGetVariable(System.String,CQL.Contexts.IVariableDeclaration@)">
            <summary>
            Lookups for a variable definition. If variable exists returns TRUE and the variable, otherwise FALSE.
            </summary>
            <param name="name"></param>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.Contexts.Implementation.VariableDeclaration">
            <summary>
            Default implementation of <see cref="T:CQL.Contexts.IVariableDeclaration"/>
            </summary>
        </member>
        <member name="M:CQL.Contexts.Implementation.VariableDeclaration.#ctor(System.String,System.Type)">
            <summary>
            Creates a variable declaration
            </summary>
            <param name="name"></param>
            <param name="value">actual the type...</param>
        </member>
        <member name="P:CQL.Contexts.Implementation.VariableDeclaration.Name">
            <summary>
            Name of the definition.
            </summary>
        </member>
        <member name="P:CQL.Contexts.Implementation.VariableDeclaration.Value">
            <summary>
            Type of the definition.
            </summary>
        </member>
        <member name="T:CQL.Contexts.Implementation.VariableDefinition">
            <summary>
            Default implementation of <see cref="T:CQL.Contexts.IVariableDefinition"/>
            </summary>
        </member>
        <member name="M:CQL.Contexts.Implementation.VariableDefinition.#ctor(System.String,System.Object)">
            <summary>
            Creates a variable definition
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:CQL.Contexts.Implementation.VariableDefinition.Name">
            <summary>
            Name of the definition.
            </summary>
        </member>
        <member name="P:CQL.Contexts.Implementation.VariableDefinition.Value">
            <summary>
            Value of the definition.
            </summary>
        </member>
        <member name="T:CQL.Contexts.IValidationScope">
            <summary>
            A validation scope is a dictionary of variables exposing only their type.
            The value is not important during validation process.
            </summary>
        </member>
        <member name="T:CQL.Contexts.IVariable`1">
            <summary>
            An abstract variable.
            </summary>
            <typeparam name="TAbstraction"><see cref="T:System.Type"/> or <see cref="T:System.Object"/></typeparam>
        </member>
        <member name="P:CQL.Contexts.IVariable`1.Name">
            <summary>
            Name of the variable.
            </summary>
        </member>
        <member name="P:CQL.Contexts.IVariable`1.Value">
            <summary>
            Abstract value.
            </summary>
        </member>
        <member name="T:CQL.Contexts.IVariableDeclaration">
            <summary>
            Declaration of a variable. Just thy type, no value.
            </summary>
        </member>
        <member name="T:CQL.Contexts.IVariableDefinition">
            <summary>
            Concrete variable with value.
            </summary>
        </member>
        <member name="T:CQL.Contexts.ScopeExtensions">
            <summary>
            Extensions for scopes
            </summary>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.NormalizeVariableName(System.String)">
            <summary>
            Global name normalization function.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.AddFromScan(CQL.Contexts.IEvaluationScope,System.Type)">
            <summary>
            Scans a type and its nested types for e.g. <see cref="T:CQL.TypeSystem.CQLGlobalFunction"/> to extend the scope with global functions and variables.
            </summary>
            <param name="this"></param>
            <param name="type"></param>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.AddFromScan(CQL.Contexts.IEvaluationScope,System.Reflection.Assembly)">
            <summary>
            Scans an assembly for e.g. <see cref="T:CQL.TypeSystem.CQLGlobalFunction"/> to extend the scope with global functions and variables.
            </summary>
            <param name="this"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.AddTypeScan(CQL.Contexts.IEvaluationScope,System.Type)">
            <summary>
            Checks type for e.g. <see cref="T:CQL.TypeSystem.CQLGlobalFunction"/> to extend the scope with global functions and variables.
            </summary>
            <param name="this"></param>
            <param name="type"></param>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineNativeGlobalFunction(CQL.Contexts.IEvaluationScope,System.String,System.Reflection.MethodInfo)">
            <summary>
            Defines a global function by its <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="this"></param>
            <param name="name"></param>
            <param name="info"></param>
        </member>
        <member name="F:CQL.Contexts.ScopeExtensions.ThisName">
            <summary>
            The name of the THIS object.
            </summary>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.ToValidationScope(CQL.Contexts.IEvaluationScope)">
            <summary>
            Converts a concrete evaluation scope into a abstract validation scope.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.TryGetThis(CQL.Contexts.IEvaluationScope,CQL.Contexts.IVariableDefinition@)">
            <summary>
            Lookup THIS
            </summary>
            <param name="this"></param>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineThis(CQL.Contexts.IEvaluationScope,System.Object)">
            <summary>
            Define THIS.
            </summary>
            <param name="this"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``1(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``2(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``3(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``4(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2,``3})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``5(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``6(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``7(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``8(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``9(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``10(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``11(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``12(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``13(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``14(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``15(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.ScopeExtensions.DefineForeignGlobalFunction``16(CQL.Contexts.Implementation.EvaluationScope,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Defines a global function using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="this"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.Contexts.VariableExtensions">
            <summary>
            Extensions for variables.
            </summary>
        </member>
        <member name="M:CQL.Contexts.VariableExtensions.ToValidationVariable(CQL.Contexts.IVariableDefinition)">
            <summary>
            Converts a evaluation into a validation variable.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.Contexts.IScope`3">
            <summary>
            A scope is a structure containing all accessible variables.
            </summary>
            <typeparam name="TAbstraction">should be <see cref="T:System.Type"/> or <see cref="T:System.Object"/></typeparam>
            <typeparam name="TSelf"></typeparam>
            <typeparam name="TVariable"></typeparam>
        </member>
        <member name="P:CQL.Contexts.IScope`3.TypeSystem">
            <summary>
            The type system applied to the scope.
            </summary>
        </member>
        <member name="M:CQL.Contexts.IScope`3.TryGetVariable(System.String,`2@)">
            <summary>
            Searches for a variable in this scope by name.
            Returns TRUE and the variable if found, otherwise FALSE
            </summary>
            <param name="name"></param>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.IScope`3.DefineVariable(System.String,`0)">
            <summary>
            Defines oroverwrites a variable.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:CQL.Contexts.IScope`3.Parent">
            <summary>
            Inherited parent scope. If a requested variable was not found in this scope,
            the search continues in the parent scope(s).
            </summary>
        </member>
        <member name="M:CQL.Contexts.IScope`3.GetPropertyValue(`0,CQL.TypeSystem.IProperty)">
            <summary>
            Returns the value of a given property.
            </summary>
            <param name="value"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Contexts.IScope`3.GetValueType(`0)">
            <summary>
            Returns the type of a given value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.EnumerableExtensions">
            <summary>
            Extensions for IEnumerable interface.
            </summary>
        </member>
        <member name="M:CQL.EnumerableExtensions.Plus``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Extends a IEnumerable by single elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="added"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.HashExtensions">
            <summary>
            Extensions for hashing.
            </summary>
        </member>
        <member name="M:CQL.HashExtensions.GetCommonHashCode(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Given a set of objects, computes a combined hash value. Order matters!
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.ErrorHandling.IErrorListener">
            <summary>
            Listens to ANTLR errors and forwards them as LocateableExceptions (<see cref="T:CQL.ErrorHandling.LocateableException"/>).
            </summary>
        </member>
        <member name="E:CQL.ErrorHandling.IErrorListener.ErrorDetected">
            <summary>
            Will be fired, when an ANTLR error was detected.
            </summary>
        </member>
        <member name="M:CQL.ErrorHandling.IErrorListener.TriggerError(CQL.ErrorHandling.LocateableException)">
            <summary>
            Fires a locateable exception via the <see cref="E:CQL.ErrorHandling.IErrorListener.ErrorDetected"/> event.
            </summary>
            <param name="error"></param>
        </member>
        <member name="T:CQL.ErrorHandling.ErrorListener">
            <summary>
            Concrete error listener to wrap ANTLR exceptions to locateable exception.
            </summary>
        </member>
        <member name="E:CQL.ErrorHandling.ErrorListener.ErrorDetected">
            <summary>
            Event to inform the user of ANTLR and locateable exceptions.
            </summary>
        </member>
        <member name="M:CQL.ErrorHandling.ErrorListener.SyntaxError(Antlr4.Runtime.IRecognizer,Antlr4.Runtime.IToken,System.Int32,System.Int32,System.String,Antlr4.Runtime.RecognitionException)">
            <summary>
            Will be called by ANTLR when a syntax error was detected. Wraps the error into a locateable exception.
            </summary>
            <param name="recognizer"></param>
            <param name="offendingSymbol"></param>
            <param name="line"></param>
            <param name="charPositionInLine"></param>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="M:CQL.ErrorHandling.ErrorListener.TriggerError(CQL.ErrorHandling.LocateableException)">
            <summary>
            Triggers <see cref="E:CQL.ErrorHandling.ErrorListener.ErrorDetected"/> event with given exception.
            </summary>
            <param name="error"></param>
        </member>
        <member name="T:CQL.ErrorHandling.LocateableException">
            <summary>
            Exception with positional information. Where in the user query was an error detected?
            </summary>
        </member>
        <member name="F:CQL.ErrorHandling.LocateableException.StartIndex">
            <summary>
            first character index
            </summary>
        </member>
        <member name="F:CQL.ErrorHandling.LocateableException.Length">
            <summary>
            Length of the errornous piece of code.
            </summary>
        </member>
        <member name="M:CQL.ErrorHandling.LocateableException.#ctor(CQL.SyntaxTree.IParserLocation,System.String,System.Exception)">
            <summary>
            Creates a exception using a <see cref="T:CQL.SyntaxTree.IParserLocation"/>
            </summary>
            <param name="location"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:CQL.ErrorHandling.LocateableException.#ctor(System.Int32,System.Int32,System.String,System.Exception)">
            <summary>
            Creates an exception using the start and end character index.
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:CQL.SyntaxTree.ArrayAccessExpression">
            <summary>
            Represents an array index accessment.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.ArrayAccessExpression.#ctor(CQL.SyntaxTree.IParserLocation,CQL.SyntaxTree.IExpression,System.Collections.Generic.IEnumerable{CQL.SyntaxTree.IExpression})">
            <summary>
            Creates a AST node for array index accessing.
            </summary>
            <param name="location"></param>
            <param name="primary"></param>
            <param name="indices"></param>
        </member>
        <member name="P:CQL.SyntaxTree.ArrayAccessExpression.Indices">
            <summary>
            All indices passed to the array accessment.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ArrayAccessExpression.Location">
            <summary>
            Position in the user query text of this AST node.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ArrayAccessExpression.SemanticType">
            <summary>
            Type of the resulting value.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ArrayAccessExpression.ThisExpression">
            <summary>
            THIS expression, which must be an array type after validation.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.ArrayAccessExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.ArrayAccessExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validates THIS, which must have an indexer. If parameter count or type does 
            not match, throws a <see cref="T:CQL.ErrorHandling.LocateableException"/>.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.ArrayAccessExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluates the THIS expression and applies the evaluated indices as an array access.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.CastExpression">
            <summary>
            AST node representing one type cast.
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.CastExpression.Kind">
            <summary>
            Implicit or explicit cast? Implicits will be created during validation process.
            Explicits can be used by the user.
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.CastExpression.CastTypeName">
            <summary>
            The type name which has to be validated.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.CastExpression.Expression">
            <summary>
            The source expression which has to be converted.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.CastExpression.#ctor(CQL.SyntaxTree.IParserLocation,CQL.TypeSystem.CoercionKind,System.String,CQL.SyntaxTree.IExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="parserContext"></param>
            <param name="kind"></param>
            <param name="castTypeName"></param>
            <param name="expression"></param>
        </member>
        <member name="M:CQL.SyntaxTree.CastExpression.#ctor(CQL.TypeSystem.CoercionRule,CQL.SyntaxTree.IExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="rule"></param>
            <param name="validatedExpression"></param>
        </member>
        <member name="P:CQL.SyntaxTree.CastExpression.Location">
            <summary>
            Position in the query text.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.CastExpression.SemanticType">
            <summary>
            Type of the cast, e.g. the casting type itself.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.CastExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.CastExpression.ToString">
            <summary>
            Outputs user-friendly representation as string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.CastExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validation: Checks whether the type really exists and whether the conversion is allowed.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.CastExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluation: Casts the input value.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.IdDelimiter">
            <summary>
            Types of delimiters
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.IdDelimiter.Slash">
            <summary>
            Slash, '/'
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.IdDelimiter.Dot">
            <summary>
            Dot, '.'
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.IdDelimiter.SingleArrow">
            <summary>
            Arrow, '->'
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.IdDelimiter.Hash">
            <summary>
            Hash, '#'
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.IdDelimiter.Dollar">
            <summary>
            Dollar, '$'
            </summary>
        </member>
        <member name="T:CQL.SyntaxTree.IExpression">
            <summary>
            An expression is a syntax node that can be validated and evaluated. During the validation 
            process, the syntax tree could be extended with further nodes and annotated with (semantic) types.
            </summary>
            <seealso cref="T:CQL.SyntaxTree.ISyntaxTreeNode" />
        </member>
        <member name="P:CQL.SyntaxTree.IExpression.SemanticType">
            <summary>
            Initially is null! After calling the <see cref="M:CQL.SyntaxTree.IExpression.Validate(CQL.Contexts.IValidationScope)"/> method
            the actual type will be set.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.IExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validates this node and sets the semantic type.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.IExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluates this node to a value of the validated semantic type.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.IExpression`1">
            <summary>
            The generic side of an expression. Subtype from this interface!
            </summary>
            <typeparam name="TSelf"></typeparam>
        </member>
        <member name="T:CQL.SyntaxTree.IntegerLiteralExpression">
            <summary>
            Represents an integer literal.
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.IntegerLiteralExpression.Value">
            <summary>
            The actual value.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.IntegerLiteralExpression.#ctor(CQL.SyntaxTree.IParserLocation,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
        </member>
        <member name="P:CQL.SyntaxTree.IntegerLiteralExpression.Location">
            <summary>
            Position in the user query text.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.IntegerLiteralExpression.SemanticType">
            <summary>
            Validated type, always Int32.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.IntegerLiteralExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluation: Returns the value.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.IntegerLiteralExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.IntegerLiteralExpression.ToString">
            <summary>
            Outputs a user-friendly string of this expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.IntegerLiteralExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validation: Nothing to do.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.IParserLocation">
            <summary>
            Position of a AST node in the query text.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.IParserLocation.StartIndex">
            <summary>
            Index of the first character.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.IParserLocation.StopIndex">
            <summary>
            Index of the last character.
            </summary>
        </member>
        <member name="T:CQL.SyntaxTree.ISyntaxTreeNode">
            <summary>
            Base class of all abstract syntax tree nodes (AST).
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ISyntaxTreeNode.Location">
            <summary>
            String position of the node in the input text (from...to).
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.ISyntaxTreeNode.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals of a AST node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.ISyntaxTreeNode`1">
            <summary>
            Actual generic base of all AST nodes.
            </summary>
            <typeparam name="TSelf"></typeparam>
        </member>
        <member name="M:CQL.SyntaxTree.ISyntaxTreeNode`1.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            The validation checks the node for validaty and may replace it by conversion nodes.
            The result returns an extended AST.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.MemberExpression">
            <summary>
            AST node representing a member usage outgoing from a this object.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.MemberExpression.#ctor(CQL.SyntaxTree.IParserLocation,CQL.SyntaxTree.IExpression,CQL.SyntaxTree.IdDelimiter,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="location"></param>
            <param name="this"></param>
            <param name="delimiter"></param>
            <param name="memberName"></param>
        </member>
        <member name="P:CQL.SyntaxTree.MemberExpression.Delimiter">
            <summary>
            Delimiter outgoing from the THIS object.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.MemberExpression.MemberName">
            <summary>
            Name of the member ofter the delimiter.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.MemberExpression.ThisExpression">
            <summary>
            The actual THIS expression looking for member.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.MemberExpression.Location">
            <summary>
            Position of this expression in the query text.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.MemberExpression.SemanticType">
            <summary>
            Validated type of the member.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.MemberExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.MemberExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validation, checking whether the member is a valid property.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.MemberExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluation.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.MemberExpression.ToString">
            <summary>
            Outputs a user-friendly representation of this expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.ParserLocation">
            <summary>
            Positional helper, containing all information to address an expression in the query text.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.ParserLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="startIndex"></param>
            <param name="stopIndex"></param>
        </member>
        <member name="F:CQL.SyntaxTree.ParserLocation.EmptyContext">
            <summary>
            Default instance with invalid position (0,0).
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ParserLocation.StartIndex">
            <summary>
            Starting character index.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ParserLocation.StopIndex">
            <summary>
            Stopping character index.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.ParserLocation.op_Implicit(Antlr4.Runtime.ParserRuleContext)~CQL.SyntaxTree.ParserLocation">
            <summary>
            Implicit conversion form parser context to ParserLocation.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:CQL.SyntaxTree.ParserLocationExtensions">
            <summary>
            Extensions for parser locations
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.ParserLocationExtensions.GetLength(CQL.SyntaxTree.IParserLocation)">
            <summary>
            Computes the length of a range.
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.SyntaxTreeExtensions">
            <summary>
            Extension for the syntax tree.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.SyntaxTreeExtensions.WasValidated(CQL.SyntaxTree.IExpression)">
            <summary>
            Check whether semantic type was already set
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.SyntaxTreeExtensions.StructurallyEquals(System.Collections.Generic.IEnumerable{CQL.SyntaxTree.ISyntaxTreeNode},System.Collections.Generic.IEnumerable{CQL.SyntaxTree.ISyntaxTreeNode})">
            <summary>
            Deep equals sets of syntax trees.
            </summary>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.SyntaxTreeExtensions.IfArrayTryGetElementType(CQL.SyntaxTree.IExpression,System.Type@)">
            <summary>
            Get the element type if the expression is an array expression.
            </summary>
            <param name="this"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.VariableExpression">
            <summary>
            An expression that addresses a variable from the EvaluationScope.
            </summary>
            <seealso cref="T:CQL.SyntaxTree.IExpression" />
            <seealso cref="T:CQL.Contexts.Implementation.EvaluationScope" />
        </member>
        <member name="M:CQL.SyntaxTree.VariableExpression.#ctor(CQL.SyntaxTree.IParserLocation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CQL.SyntaxTree.VariableExpression"/> class.
            </summary>
            <param name="location">The location when parsed from a user query.</param>
            <param name="identifier">The identifier addressing the variable in the evaluation scope.</param>
        </member>
        <member name="P:CQL.SyntaxTree.VariableExpression.Identifier">
            <summary>
            The variable identifier of this expresssion.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.VariableExpression.Location">
            <summary>
            The location of this expression, when parsed from a user query.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.VariableExpression.SemanticType">
            <summary>
            The semantic type of this variable expression, after it was parsed and validated.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.VariableExpression.ToString">
            <summary>
            Outputs a user-readable representation of this variable expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.VariableExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.VariableExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validation of expression: checks whether the variable is known and returns its type.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
            <exception cref="T:CQL.ErrorHandling.LocateableException">Unknown field!</exception>
        </member>
        <member name="M:CQL.SyntaxTree.VariableExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluation of expression: reads the value of the variable from the given context.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
            <exception cref="T:CQL.ErrorHandling.LocateableException">Unknown field!</exception>
        </member>
        <member name="T:CQL.SyntaxTree.ArrayExpression">
            <summary>
            Represents an array literal.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ArrayExpression.Elements">
            <summary>
            Expressions of all elements.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.ArrayExpression.#ctor(CQL.SyntaxTree.IParserLocation,System.Collections.Generic.IEnumerable{CQL.SyntaxTree.IExpression})">
            <summary>
            Creates a ArrayExpression.
            </summary>
            <param name="context"></param>
            <param name="elements"></param>
        </member>
        <member name="P:CQL.SyntaxTree.ArrayExpression.Location">
            <summary>
            Position of the literal in the user query test.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ArrayExpression.SemanticType">
            <summary>
            Validated type of the array.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.ArrayExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.ArrayExpression.ToString">
            <summary>
            Outputs user friendly string representing this expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.ArrayExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validates expression. Trys to align types.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.ArrayExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluates the value of this array expression.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.BinaryOperationExpression">
            <summary>
            AST node representing binary operator expressions (with two operands).
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.BinaryOperationExpression.LeftExpression">
            <summary>
            Operand on the left side of the operator.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.BinaryOperationExpression.RightExpression">
            <summary>
            Operand on the right side of the operand.
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperationExpression.Operator">
            <summary>
            Binary operator.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.BinaryOperationExpression.#ctor(CQL.SyntaxTree.IParserLocation,CQL.SyntaxTree.BinaryOperator,CQL.SyntaxTree.IExpression,CQL.SyntaxTree.IExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
            <param name="operator"></param>
            <param name="leftExpression"></param>
            <param name="rightExpression"></param>
        </member>
        <member name="P:CQL.SyntaxTree.BinaryOperationExpression.SemanticType">
            <summary>
            Validated type.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.BinaryOperationExpression.Location">
            <summary>
            Position of this expression in the query text.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.BinaryOperationExpression.ToString">
            <summary>
            Outputs user-friendly representation string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.BinaryOperationExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.BinaryOperationExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validation: determines the actual operation and its return type.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.BinaryOperationExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluation: Executes the binary operation.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.BinaryOperator">
            <summary>
            Types of binary operation.
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.Or">
            <summary>
            Logical OR
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.And">
            <summary>
            Logical AND
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.Equals">
            <summary>
            Equality
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.NotEquals">
            <summary>
            Negated equality
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.GreaterThan">
            <summary>
            Greater than relation
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.GreaterThanEquals">
            <summary>
            Greater or equals relation
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.LessThan">
            <summary>
            Less than relation
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.LessThanEquals">
            <summary>
            Less or equals than relation.
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.Add">
            <summary>
            Addition of numerics or concat for strings
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.Sub">
            <summary>
            Substraction
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.Mul">
            <summary>
            Multiplication
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.Mod">
            <summary>
            Modulo
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.Div">
            <summary>
            Division
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.Contains">
            <summary>
            Contains check on strings
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.DoesNotContain">
            <summary>
            Does not contain check on strings.
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.Is">
            <summary>
            Type and Null check
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.In">
            <summary>
            Element IN Array
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BinaryOperator.NotIn">
            <summary>
            Element NOT IN Array
            </summary>
        </member>
        <member name="T:CQL.SyntaxTree.BooleanLiteralExpression">
            <summary>
            Expression representing boolean constants.
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.BooleanLiteralExpression.Value">
            <summary>
            The actual value, true or false.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.BooleanLiteralExpression.#ctor(CQL.SyntaxTree.IParserLocation,System.Boolean)">
            <summary>
            Creates a AST node for boolean literal.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
        </member>
        <member name="P:CQL.SyntaxTree.BooleanLiteralExpression.Location">
            <summary>
            The position of the literal in the user query text.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.BooleanLiteralExpression.SemanticType">
            <summary>
            The type of a boolean literal (is always typeof(bool)).
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.BooleanLiteralExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluates literal to its value.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.BooleanLiteralExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.BooleanLiteralExpression.ToString">
            <summary>
            AST to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.BooleanLiteralExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validates literal.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.ConditionalExpression">
            <summary>
            AST node representing the ternary ?-operator.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ConditionalExpression.Condition">
            <summary>
            Condition expression.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ConditionalExpression.Then">
            <summary>
            Then expression.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ConditionalExpression.Else">
            <summary>
            Else expression.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.ConditionalExpression.#ctor(CQL.SyntaxTree.IParserLocation,CQL.SyntaxTree.IExpression,CQL.SyntaxTree.IExpression,CQL.SyntaxTree.IExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
            <param name="condition"></param>
            <param name="then"></param>
            <param name="else"></param>
        </member>
        <member name="P:CQL.SyntaxTree.ConditionalExpression.Location">
            <summary>
            Location in the query text
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ConditionalExpression.SemanticType">
            <summary>
            Validated type.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.ConditionalExpression.ToString">
            <summary>
            User-friendly representation as string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.ConditionalExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.ConditionalExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validation.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.ConditionalExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluation... does only execute the branch with the corressponding condition 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.FloatingPointLiteralExpression">
            <summary>
            AST node representing a decimal number.
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.FloatingPointLiteralExpression.Value">
            <summary>
            The actual value.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.FloatingPointLiteralExpression.#ctor(CQL.SyntaxTree.IParserLocation,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
        </member>
        <member name="P:CQL.SyntaxTree.FloatingPointLiteralExpression.Location">
            <summary>
            Position of the expression in the query text.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.FloatingPointLiteralExpression.SemanticType">
            <summary>
            Validated type... always double here.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.FloatingPointLiteralExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluation returning the value.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.FloatingPointLiteralExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.FloatingPointLiteralExpression.ToString">
            <summary>
            User-friendly representation as string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.FloatingPointLiteralExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validation... nothing to do here.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.EmptyExpression">
            <summary>
            AST node representing the EMPTY expression.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.EmptyExpression.#ctor(CQL.SyntaxTree.IParserLocation)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:CQL.SyntaxTree.EmptyExpression.Location">
            <summary>
            Position of the expression in the query text.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.EmptyExpression.SemanticType">
            <summary>
            Validated type.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.EmptyExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluation...
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.EmptyExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.EmptyExpression.ToString">
            <summary>
            Outputs a user-friendly representation as string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.EmptyExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validation...
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.FunctionCallExpression">
            <summary>
            A method call consists of a THIS expression (its value should contain a member function closure) 
            and zero to several parameter expressions.
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.FunctionCallExpression.ThisExpression">
            <summary>
            The evaluated THIS expression must evaluate to a member function closure.
            </summary>
            <seealso cref="T:CQL.TypeSystem.IMemberFunctionClosure"/>
        </member>
        <member name="P:CQL.SyntaxTree.FunctionCallExpression.Parameters">
            <summary>
            Contains the expressions of the member function call parameters.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.FunctionCallExpression.#ctor(CQL.SyntaxTree.IParserLocation,CQL.SyntaxTree.IExpression,System.Collections.Generic.IEnumerable{CQL.SyntaxTree.IExpression})">
            <summary>
            Creates a member function call expression.
            </summary>
            <param name="context"></param>
            <param name="this"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:CQL.SyntaxTree.FunctionCallExpression.Location">
            <summary>
            Contains the position of the member function call if parsed from a user query.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.FunctionCallExpression.SemanticType">
            <summary>
            After validation, this property will contain the return type of the member function call.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.FunctionCallExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals for this syntax node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.FunctionCallExpression.ToString">
            <summary>
            Creates a user-readable string, representing the member function call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.FunctionCallExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validates this function call, by checking the signature, parameter count.
            Sets the semantic type to the return type of the found function.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.FunctionCallExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluates the THIS expression first. If the result is a function closure, the closure will be invoked with the evaluated parameters.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.NullExpression">
            <summary>
            AST node representing the NULL literal.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.NullExpression.#ctor(CQL.SyntaxTree.IParserLocation)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:CQL.SyntaxTree.NullExpression.Location">
            <summary>
            Position in the query text.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.NullExpression.SemanticType">
            <summary>
            Validated type.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.NullExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluation. Nothing to do.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.NullExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.NullExpression.ToString">
            <summary>
            User-friendly representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.NullExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validation.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.ParenthesisExpression">
            <summary>
            AST node representing a parenthesed expression (is important to transform back to a string!).
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ParenthesisExpression.Expression">
            <summary>
            Inner expression.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.ParenthesisExpression.#ctor(CQL.SyntaxTree.IParserLocation,CQL.SyntaxTree.IExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
            <param name="expression"></param>
        </member>
        <member name="P:CQL.SyntaxTree.ParenthesisExpression.Location">
            <summary>
            Position in the query text.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.ParenthesisExpression.SemanticType">
            <summary>
            Validated type
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.ParenthesisExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.ParenthesisExpression.ToString">
            <summary>
            User-friendly representation of this expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.ParenthesisExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validation...
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.ParenthesisExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluation...
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.Query">
            <summary>
            Represents the top-level boolean expression.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.Query.Expression">
            <summary>
            Queries expression. Must be boolean.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.Query.#ctor(CQL.SyntaxTree.IParserLocation,CQL.SyntaxTree.IExpression)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="expression">not null</param>
        </member>
        <member name="P:CQL.SyntaxTree.Query.Location">
            <summary>
            Position in the user query text.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.Query.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.Query.ToString">
            <summary>
            AST to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.Query.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validates the query. If the expression is not boolean, throws a <see cref="T:CQL.ErrorHandling.LocateableException"/>.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.Query.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluates the query.
            </summary>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.StringLiteralExpression">
            <summary>
            AST node representing a string literal.
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.StringLiteralExpression.Value">
            <summary>
            Actual value of the literal (unescaped).
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.StringLiteralExpression.#ctor(CQL.SyntaxTree.IParserLocation,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
            <param name="value"></param>
        </member>
        <member name="P:CQL.SyntaxTree.StringLiteralExpression.Location">
            <summary>
            Location of this literal in query text.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.StringLiteralExpression.SemanticType">
            <summary>
            The validated type... always System.String
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.StringLiteralExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluation by returning the string value.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.StringLiteralExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.StringLiteralExpression.ToString">
            <summary>
            Escaped string literal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.StringLiteralExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validation, nothing important for strings.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.UnaryOperationExpression">
            <summary>
            AST node, representing a unary operation.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.UnaryOperationExpression.Expression">
            <summary>
            The expression on whcih the unary operator will be applied.
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.UnaryOperationExpression.Operator">
            <summary>
            The applied operator.
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.UnaryOperationExpression.operation">
            <summary>
            The operation behind the operator. Will be set during validation.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.UnaryOperationExpression.#ctor(CQL.SyntaxTree.IParserLocation,CQL.SyntaxTree.UnaryOperator,CQL.SyntaxTree.IExpression)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
            <param name="operator"></param>
            <param name="expression"></param>
        </member>
        <member name="P:CQL.SyntaxTree.UnaryOperationExpression.Location">
            <summary>
            Location in the query text of this AST node.
            </summary>
        </member>
        <member name="P:CQL.SyntaxTree.UnaryOperationExpression.SemanticType">
            <summary>
            The validated type of this expression.
            </summary>
        </member>
        <member name="M:CQL.SyntaxTree.UnaryOperationExpression.StructurallyEquals(CQL.SyntaxTree.ISyntaxTreeNode)">
            <summary>
            Deep equals.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.UnaryOperationExpression.ToString">
            <summary>
            Outputs a user-friendly string representation of this expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.UnaryOperationExpression.Validate(CQL.Contexts.IValidationScope)">
            <summary>
            Validation: Determine the actual operation and return type of this unary operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.SyntaxTree.UnaryOperationExpression.Evaluate(CQL.Contexts.IEvaluationScope)">
            <summary>
            Evaluation: execute the unary operation.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.SyntaxTree.UnaryOperator">
            <summary>
            Unary operator types
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.UnaryOperator.Plus">
            <summary>
            Positive sign
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.UnaryOperator.Minus">
            <summary>
            Negative sign
            </summary>
        </member>
        <member name="F:CQL.SyntaxTree.UnaryOperator.Not">
            <summary>
            Not operator
            </summary>
        </member>
        <member name="T:CQL.TypeExtensions">
            <summary>
            Extensions defined for types.
            </summary>
        </member>
        <member name="M:CQL.TypeExtensions.IsNumeric(System.Type)">
            <summary>
            Check whether a type is  numeric.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeExtensions.IfEnumerableTryGetElementType(System.Type,System.Type@)">
            <summary>
            Checks whether the type contains the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            If yes, returns its element type and returns true. If no, returns false.
            </summary>
            <param name="this"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeExtensions.GetCommonBaseClass(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Given a set of types, trys to determine the common type.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.CQLGlobalFunction">
            <summary>
            Marks a static function as global function in a evaluation scope.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.CQLGlobalFunction.#ctor(System.String)">
            <summary>
            Creates the attribute.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:CQL.TypeSystem.CQLGlobalFunction.Name">
            <summary>
            The name of the function within the evaluation scope.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.CQLNativeMemberFunctionAttribute">
            <summary>
            Marks a member function to be registered in the type system builder.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.CQLNativeMemberFunctionAttribute.#ctor(System.String,CQL.SyntaxTree.IdDelimiter)">
            <summary>
            Creates the attribute
            </summary>
            <param name="name"></param>
            <param name="delimiter"></param>
        </member>
        <member name="P:CQL.TypeSystem.CQLNativeMemberFunctionAttribute.Name">
            <summary>
            Name of the method within the type system.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.CQLNativeMemberFunctionAttribute.Delimiter">
            <summary>
            The delimiter to access the method.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.CQLNativeMemberIndexerAttribute">
            <summary>
            Marks an indexer property to be registered in the type and type system builder.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.CQLNativeMemberPropertyAttribute">
            <summary>
            Marks a class property to be registered as native property for a CQL type.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.CQLNativeMemberPropertyAttribute.#ctor(System.String,CQL.SyntaxTree.IdDelimiter)">
            <summary>
            creates the attribute
            </summary>
            <param name="name"></param>
            <param name="delimiter"></param>
        </member>
        <member name="P:CQL.TypeSystem.CQLNativeMemberPropertyAttribute.Name">
            <summary>
            Name of the property within the type.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.CQLNativeMemberPropertyAttribute.Delimiter">
            <summary>
            Delimiter to this property.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.CQLTypeAttribute">
            <summary>
            Marks a class as CQL type. Classes with this attribute can be scanned by the type system builder <see cref="T:CQL.TypeSystem.ITypeSystemBuilder"/>.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.CQLTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates an attribute.
            </summary>
            <param name="name"></param>
            <param name="usage"></param>
        </member>
        <member name="P:CQL.TypeSystem.CQLTypeAttribute.Name">
            <summary>
            Name of the type within the type system
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.CQLTypeAttribute.Usage">
            <summary>
            Usage documentation
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.GlobalFunctionSignature">
            <summary>
            Signatrue of a glbal function.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.GlobalFunctionSignature.#ctor(System.Type,System.Type[])">
            <summary>
            Creates a type signature of a global function.
            </summary>
            <param name="returnType"></param>
            <param name="parameterTypes"></param>
        </member>
        <member name="P:CQL.TypeSystem.GlobalFunctionSignature.ReturnType">
            <summary>
            the return type.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.GlobalFunctionSignature.ParameterTypes">
            <summary>
            The parameter types.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.IGlobalFunctionClosure">
            <summary>
            The closure of a global function...
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.IGlobalFunctionClosure.Invoke(System.Object[])">
            <summary>
            Calls the bound global function.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.IMemberFunctionSignature">
            <summary>
            This, Parameters and Return type of a member function.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.IMemberFunctionSignature.#ctor(System.Type,System.Type,System.Type[])">
            <summary>
            Create a signature.
            </summary>
            <param name="thisType"></param>
            <param name="returnType"></param>
            <param name="parameterTypes"></param>
        </member>
        <member name="P:CQL.TypeSystem.IMemberFunctionSignature.ThisType">
            <summary>
            This type
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.IMemberFunctionSignature.ReturnType">
            <summary>
            Return type
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.IMemberFunctionSignature.ParameterTypes">
            <summary>
            Parameter types
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignIndexer">
            <summary>
            A foreign indexer is a lambda function used as index property.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignIndexer.#ctor(System.Type[],System.Type,System.Delegate)">
            <summary>
            Creates a foreign indexer.
            </summary>
            <param name="formalParameters"></param>
            <param name="returnType"></param>
            <param name="getter"></param>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.ForeignIndexer.FormalParameters">
            <summary>
            Types of the indices.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.ForeignIndexer.ReturnType">
            <summary>
            Return type.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignIndexer.Get(System.Object,System.Object[])">
            <summary>
            Evaluates the foreign lambda function on the THIS object with a set of indices.
            </summary>
            <param name="this"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignProperty">
            <summary>
            A foreign property is a lambda function extracting information out of a THIS object.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignProperty.#ctor(CQL.SyntaxTree.IdDelimiter,System.String,System.Type,System.Func{System.Object,System.Object})">
            <summary>
            Creates a property using a lambda.
            </summary>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="returnType"></param>
            <param name="getter"></param>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.ForeignProperty.Delimiter">
            <summary>
            Delimiter of the property.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.ForeignProperty.Name">
            <summary>
            Name of the proeprty.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.ForeignProperty.ReturnType">
            <summary>
            Return type of this property.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignProperty.Get(System.Object)">
            <summary>
            Extracts the property value out of the THIS object.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`1">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`1.#ctor(System.Func{`0})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`2">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`2.#ctor(System.Func{`0,`1})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`3">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`3.#ctor(System.Func{`0,`1,`2})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`4">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`4.#ctor(System.Func{`0,`1,`2,`3})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`5">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`5.#ctor(System.Func{`0,`1,`2,`3,`4})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`6">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`6.#ctor(System.Func{`0,`1,`2,`3,`4,`5})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`7">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`7.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`8">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`8.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`9">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`9.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`10">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`10.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`11">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`11.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`12">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`12.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`13">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`13.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`14">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`14.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`15">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`15.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction`16">
            <summary>
            Defines a global function by a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction`16.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15})">
            <summary>
            Creates a global lambda function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`1">
            <summary>
            Defines a global function by a native MethodInfo.
            </summary>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`1.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`2">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`2.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`3">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`3.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`4">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`4.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`5">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`5.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`6">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`6.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`7">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`7.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`8">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`8.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`9">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`9.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`10">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`10.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`11">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`11.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`12">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`12.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`13">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`13.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`14">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`14.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`15">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`15.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction`16">
            <summary>
            Defines a global function by MethodInfo.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction`16.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a global native function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunctionExtensions">
            <summary>
            Extensions for native global functions.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunctionExtensions.CreateByMethodInfo(System.Reflection.MethodInfo)">
            <summary>
            Converts a MethodInfo into a global function.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.LambdaGlobalFunction">
            <summary>
            A global function defined using a lambda function.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction.#ctor(System.Type[],System.Type,System.Delegate)">
            <summary>
            Abstract constructor.
            </summary>
            <param name="formalParameters"></param>
            <param name="returnType"></param>
            <param name="body"></param>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.LambdaGlobalFunction.Signature">
            <summary>
            Type signature of the function.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.LambdaGlobalFunction.Invoke(System.Object[])">
            <summary>
            Calls the global function.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`2">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`2.#ctor(System.Func{`0,`1})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`3">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`3.#ctor(System.Func{`0,`1,`2})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`4">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`4.#ctor(System.Func{`0,`1,`2,`3})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`5">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`5.#ctor(System.Func{`0,`1,`2,`3,`4})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`6">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`6.#ctor(System.Func{`0,`1,`2,`3,`4,`5})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`7">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`7.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`8">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`8.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`9">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`9.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`10">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`10.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`11">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`11.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`12">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`12.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`13">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`13.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`14">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`14.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`15">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`15.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`16">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`16.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction`17">
            <summary>
            Types wrapping foreign member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction`17.#ctor(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16})">
            <summary>
            Creates a foreign member function.
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`2">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`2.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`3">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`3.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`4">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`4.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`5">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`5.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`6">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`6.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`7">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`7.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`8">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`8.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`9">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`9.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`10">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`10.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`11">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`11.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`12">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`12.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`13">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`13.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`14">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`14.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`15">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`15.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`16">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`16.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction`17">
            <summary>
            Types wrapping native member function.
            </summary>
            <typeparam name="TThis"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction`17.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunctionExtensions">
            <summary>
            Extensions for native member functions.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunctionExtensions.CreateByMethodInfo(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Converts a MethodInfo into a native member function.
            </summary>
            <param name="this"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeGlobalFunction">
            <summary>
            Abstract base class of all native global functions.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a native global function from a MethodInfo.
            </summary>
            <param name="method"></param>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.NativeGlobalFunction.Signature">
            <summary>
            Type signature.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeGlobalFunction.Invoke(System.Object[])">
            <summary>
            Calls the native function using the concrete parameters.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeIndexer">
            <summary>
            A native indexer is a PropertyInfo of the native type of the corressponding <see cref="T:CQL.TypeSystem.IType`1"/>.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeIndexer.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a native indexer.
            </summary>
            <param name="property"></param>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.NativeIndexer.FormalParameters">
            <summary>
            Indices types.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.NativeIndexer.ReturnType">
            <summary>
            Return type.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeIndexer.Get(System.Object,System.Object[])">
            <summary>
            Evaluates the indexer property.
            </summary>
            <param name="this"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeProperty">
            <summary>
            A native property is a property of an <see cref="T:CQL.TypeSystem.IType`1"/> by accessing a real 
            <see cref="T:System.Reflection.PropertyInfo"/> of the type TType.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeProperty.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates a native property.
            </summary>
            <param name="name"></param>
            <param name="property"></param>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.NativeProperty.Name">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.NativeProperty.ReturnType">
            <summary>
            Return type.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeProperty.Get(System.Object)">
            <summary>
            Returns the property value of the THIS parameter. 
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.Type`1">
            <summary>
            The default implementation of <see cref="T:CQL.TypeSystem.IType`1"/>
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``2(System.Func{`0,``0,``1})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``3(System.Func{`0,``0,``1,``2})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``4(System.Func{`0,``0,``1,``2,``3})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``5(System.Func{`0,``0,``1,``2,``3,``4})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``6(System.Func{`0,``0,``1,``2,``3,``4,``5})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``7(System.Func{`0,``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``8(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``9(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``10(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``11(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``12(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``13(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``14(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``15(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignIndexer``16(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Add a indexer using a lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``1(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``2(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``3(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``4(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``5(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``6(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``7(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``8(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``9(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``10(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``11(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``12(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``13(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``14(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``15(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignFunction``16(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Add a lambda function as foreign member function to a type.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.#ctor(System.String,System.String)">
            <summary>
            Create a new type.
            </summary>
            <param name="name"></param>
            <param name="usage"></param>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.Type`1.Name">
            <summary>
            Name under which the native type was registered.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.Type`1.Usage">
            <summary>
            Usage documentation of this type.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.Type`1.NativeType">
            <summary>
            The CSharp type.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddForeignProperty``1(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0})">
            <summary>
            Adds a lambda function to create a foreign property.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.GetByName(CQL.SyntaxTree.IdDelimiter,System.String)">
            <summary>
            Get a property by its name and delimiter.
            </summary>
            <param name="delimiter"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddNativeFunction(CQL.SyntaxTree.IdDelimiter,System.String,System.Reflection.MethodInfo)">
            <summary>
            Adds a native function. The function must be a MethodInfo of a real method of the native type.
            </summary>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddNativeProperty(CQL.SyntaxTree.IdDelimiter,System.String,System.Reflection.PropertyInfo)">
            <summary>
            Adds a native MethodInfo which is a real method of the native type.
            </summary>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.Type`1.AddNativeIndexer(System.Reflection.PropertyInfo)">
            <summary>
            Adds a real indexer property of the native type.
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.Type`1.Indexer">
            <summary>
            Returns the registered indexer of this type, or null.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.Type`1.Members">
            <summary>
            Returns all members of this type.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.NativeMemberFunction">
            <summary>
            Native member functions are members of the original ("this") type.
            They are declared in the class definition of the THIS type.
            Use <see cref="T:CQL.TypeSystem.CQLNativeMemberFunctionAttribute"/> attribute to
            mark a function for a type in the typesystem.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction.#ctor(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Creates a native member function. Requires the actual THIS type and the 
            <see cref="T:System.Reflection.MemberInfo"/> of the requested function.
            </summary>
            <param name="this"></param>
            <param name="method"></param>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.NativeMemberFunction.Signature">
            <summary>
            Summarizes the signature of the function.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.NativeMemberFunction.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the function by passing the THIS object and the parameter objects.
            </summary>
            <param name="this"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.ForeignMemberFunction">
            <summary>
            Foreign member functions are lambda functions that extend types without changing
            its class definition.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction.#ctor(System.Type,System.Type[],System.Type,System.Delegate)">
            <summary>
            Creates a foreign member function. Needs the interface types and a lambda 
            function with this signature.
            </summary>
            <param name="thisType"></param>
            <param name="formalParameters"></param>
            <param name="returnType"></param>
            <param name="body"></param>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.ForeignMemberFunction.Signature">
            <summary>
            The signature of the foreign member function.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.ForeignMemberFunction.Invoke(System.Object,System.Object[])">
            <summary>
            Calls the lambda function, passing the THIS object and the parameters.
            </summary>
            <param name="this"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.TypeSystem">
            <summary>
            The default implementation of <see cref="T:CQL.TypeSystem.ITypeSystem"/>
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.TypeSystem.Null">
            <summary>
            Default NULL class
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.TypeSystem.Empty">
            <summary>
            Default EMPTY class
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.AddType``1(System.String,System.String)">
            <summary>
            Adds a new native type.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="usage"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.AddCoercionRule``2(CQL.TypeSystem.CoercionKind,System.Func{``0,``1})">
            <summary>
            Adds a new coercion rule. Trys to avoid cyclic implicit casts chains.
            </summary>
            <typeparam name="TOriginalType"></typeparam>
            <typeparam name="TCastingType"></typeparam>
            <param name="kind"></param>
            <param name="cast"></param>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.AddRule``3(CQL.SyntaxTree.BinaryOperator,System.Func{``0,``1,``2})">
            <summary>
            Adds binary rules.
            </summary>
            <typeparam name="TLeft"></typeparam>
            <typeparam name="TRight"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="op"></param>
            <param name="aggregate"></param>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.AddRule``2(CQL.SyntaxTree.UnaryOperator,System.Func{``0,``1})">
            <summary>
            Adds unary rules.
            </summary>
            <typeparam name="TOperand"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="op"></param>
            <param name="func"></param>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.GetBinaryOperation(CQL.SyntaxTree.BinaryOperator,System.Type,System.Type)">
            <summary>
            Lookup for binary operations.
            </summary>
            <param name="op"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.GetUnaryOperation(CQL.SyntaxTree.UnaryOperator,System.Type)">
            <summary>
            Lookup for unary operations.
            </summary>
            <param name="op"></param>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.TypeSystem.Types">
            <summary>
            Returns all registered types.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.TypeSystem.NullType">
            <summary>
            Returns the null type.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.Implementation.TypeSystem.EmptyType">
            <summary>
            Returns the empty type.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.GetCoercionRule(System.Type,System.Type)">
            <summary>
            Returns a coercion rule if given, null otherwise.
            </summary>
            <param name="original"></param>
            <param name="casting"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.GetTypeByName(System.String)">
            <summary>
            get a registered type by its name (case insensitive)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.GetTypesByPrefix(System.String)">
            <summary>
            Get all types matching a prefix (case insensitve).
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.GetImplicitlyCastChain(System.Type,System.Type)">
            <summary>
            Returns a possible implicit cast chain.
            </summary>
            <param name="original"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.GetTypeByNative(System.Type)">
            <summary>
            Get a type by its native representation.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.GetBinaryOperations">
            <summary>
            Returns all registered binary operations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.GetImplicitlyCastsTo(System.Type)">
            <summary>
            Gets all source types for a given target type, that can be gained by implicit cast.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystem.GetTypeByNative``1">
            <summary>
            Returns a registered type by its native representation.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.Implementation.TypeSystemBuilder">
            <summary>
            Default implementation of <see cref="T:CQL.TypeSystem.ITypeSystemBuilder"/>
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystemBuilder.#ctor(CQL.TypeSystem.SystemDefaultFlags)">
            <summary>
            Creates a type system builder.
            </summary>
            <param name="flags">Setups the initial types.</param>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystemBuilder.AddType``1(System.String,System.String,CQL.TypeSystem.TypeDefaultFlags)">
            <summary>
            Registers a native type to be known under the given name.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="name"></param>
            <param name="usage"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystemBuilder.AddCoercionRule``2(CQL.TypeSystem.CoercionKind,System.Func{``0,``1})">
            <summary>
            Adds a coercion rule.
            </summary>
            <typeparam name="TOriginalType"></typeparam>
            <typeparam name="TCastingType"></typeparam>
            <param name="kind"></param>
            <param name="cast"></param>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystemBuilder.AddContainsRule``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Adds a contains rule.
            </summary>
            <typeparam name="TLeft"></typeparam>
            <typeparam name="TRight"></typeparam>
            <param name="aggregate"></param>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystemBuilder.AddEqualsRule``1(System.Func{``0,``0,System.Boolean})">
            <summary>
            Adds equality rules
            </summary>
            <typeparam name="TOperand"></typeparam>
            <param name="aggregate"></param>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystemBuilder.AddLessRule``1(System.Func{``0,``0,System.Boolean})">
            <summary>
            Adds "less" rules
            </summary>
            <typeparam name="TOperand"></typeparam>
            <param name="aggregate"></param>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystemBuilder.Build">
            <summary>
            Eventually builds the type system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystemBuilder.AddRule``2(CQL.SyntaxTree.UnaryOperator,System.Func{``0,``1})">
            <summary>
            Add unary rules.
            </summary>
            <typeparam name="TOperand"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="op"></param>
            <param name="func"></param>
        </member>
        <member name="M:CQL.TypeSystem.Implementation.TypeSystemBuilder.AddRule``3(CQL.SyntaxTree.BinaryOperator,System.Func{``0,``1,``2})">
            <summary>
            Adds binary rules.
            </summary>
            <typeparam name="TLeft"></typeparam>
            <typeparam name="TRight"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="op"></param>
            <param name="aggregate"></param>
        </member>
        <member name="T:CQL.TypeSystem.IType`1">
            <summary>
            A registered type in the type system, representing a C# native type.
            </summary>
            <typeparam name="TType">the native type</typeparam>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``2(System.Func{`0,``0,``1})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``3(System.Func{`0,``0,``1,``2})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``4(System.Func{`0,``0,``1,``2,``3})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``5(System.Func{`0,``0,``1,``2,``3,``4})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``6(System.Func{`0,``0,``1,``2,``3,``4,``5})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``7(System.Func{`0,``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``8(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``9(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``10(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``11(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``12(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``13(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``14(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``15(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignIndexer``16(System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Adds an foreign indexer by adding a lambda function to get the value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``1(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``2(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``3(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``4(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``5(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``6(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``7(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``8(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``9(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``10(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``11(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``12(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``13(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``14(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``15(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignFunction``16(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Adds a foreign function to the type by a given lambda function.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType`1.AddForeignProperty``1(CQL.SyntaxTree.IdDelimiter,System.String,System.Func{`0,``0})">
            <summary>
            Adds a foreign (lambda) property.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.SystemDefaultFlags">
            <summary>
            Setup flags for the type system initialization.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.SystemDefaultFlags.None">
            <summary>
            No default behaviour.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.SystemDefaultFlags.HasBoolean">
            <summary>
            Add boolean type to the type system.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.SystemDefaultFlags.HasIntegers">
            <summary>
            Add integer type to the type system.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.SystemDefaultFlags.HasDoubles">
            <summary>
            Add double type to the type system.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.SystemDefaultFlags.HasStrings">
            <summary>
            Add string type to the type system.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.SystemDefaultFlags.All">
            <summary>
            Add all default types to the type system.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.IGlobalFunction">
            <summary>
            Describes a global function.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.IGlobalFunction.Signature">
            <summary>
            Type signature of this function.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.IGlobalFunction.Invoke(System.Object[])">
            <summary>
            Calls the function by passing concrete parameters.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.IGlobalFunctionClosure`1">
            <summary>
            Generic variant of <see cref="T:CQL.TypeSystem.IGlobalFunctionClosure"/>
            </summary>
            <typeparam name="TFunction"></typeparam>
        </member>
        <member name="P:CQL.TypeSystem.IGlobalFunctionClosure`1.Function">
            <summary>
            The bound global function.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.TypeDefaultFlags">
            <summary>
            Flags for manually adding types to a type system. These flags represents 
            groups of operators which will be added automatically.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.TypeDefaultFlags.None">
            <summary>
            No automatic type operations.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.TypeDefaultFlags.Equals">
            <summary>
            Add Equals (=, !=) operators
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.TypeDefaultFlags.Comparable">
            <summary>
            Add CompareTo operators, if is defined on given type.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.TypeDefaultFlags.Numeric">
            <summary>
            Add numeric operations (+,-,/,*,%), if type is numeric.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.TypeDefaultFlags.All">
            <summary>
            Try to add all default operations if possible.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.IMemberIndexer">
            <summary>
            Represenst an indexer for a type.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.IMemberIndexer.ReturnType">
            <summary>
            Return type of the indexer.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.IMemberIndexer.FormalParameters">
            <summary>
            Types of all indices for the access.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.IMemberIndexer.Get(System.Object,System.Object[])">
            <summary>
            Access via indexer by passing concrete parameters and a THIS object.
            </summary>
            <param name="this"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.IMemberFunction">
            <summary>
            A non-global function belonging to a type.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.IMemberFunction.Signature">
            <summary>
            This, Parameters and Return type of this function.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.IMemberFunction.Invoke(System.Object,System.Object[])">
            <summary>
            Call the function by passing THIS and PARAMETERS.
            </summary>
            <param name="this"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.IMemberFunctionClosure">
            <summary>
            A closure (THIS + FUNCTION) for a member function.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.IMemberFunctionClosure.ThisObject">
            <summary>
            THIS bound to a member function.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.IMemberFunctionClosure.Invoke(System.Object[])">
            <summary>
            Invoke function by passing the parameters only.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.IMemberFunctionClosure`1">
            <summary>
            Generic variant of <see cref="T:CQL.TypeSystem.IMemberFunctionClosure"/>. Used in the validation 
            process to reconstruct the function signature.
            </summary>
            <typeparam name="TMemberFunction"></typeparam>
        </member>
        <member name="P:CQL.TypeSystem.IMemberFunctionClosure`1.Function">
            <summary>
            The actual function bound to this closure.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.IProperty">
            <summary>
            Represents a property of a type.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.IProperty.Name">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.IProperty.ReturnType">
            <summary>
            Return type of the property.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.IProperty.Get(System.Object)">
            <summary>
            Returns the property for a given THIS value.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.MethodExtensions">
            <summary>
            Extensions for <see cref="T:CQL.TypeSystem.IMemberFunction"/>.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.MethodExtensions.IfMemberFunctionClosureTryGetMethodSignature(System.Type,CQL.TypeSystem.IMemberFunctionSignature@)">
            <summary>
            Check type if it is a member function.
            Returns true and a signature if that is the case. FALSE otherwise.
            </summary>
            <param name="this"></param>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.MethodExtensions.IfFunctionClosureTryGetFunctionType(System.Type,CQL.TypeSystem.GlobalFunctionSignature@)">
            <summary>
            Checks whether THIS is a global function closure and returns TRUE with a signature if it is the case, otherwise FALSE.
            </summary>
            <param name="this"></param>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.MethodExtensions.BindThis``1(``0,System.Object)">
            <summary>
            Binds a member function to a THIS object resulting in a <see cref="T:CQL.TypeSystem.IMemberFunctionClosure"/>
            </summary>
            <typeparam name="TMemberFunction"></typeparam>
            <param name="function"></param>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.TypeSystemBuilderExtensions">
            <summary>
            Extensions for <see cref="T:CQL.TypeSystem.ITypeSystemBuilder"/>.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.TypeSystemBuilderExtensions.AddTypeScan(CQL.TypeSystem.ITypeSystemBuilder,System.Type)">
            <summary>
            Scans a SINGLE type for e.g. the <see cref="T:CQL.TypeSystem.CQLTypeAttribute"/> and extends the builder with these types including 
            properties, indexers and methods.
            </summary>
            <param name="this"></param>
            <param name="type"></param>
        </member>
        <member name="M:CQL.TypeSystem.TypeSystemBuilderExtensions.Unvoid(System.Type)">
            <summary>
            Converts the type <see cref="T:System.Void"/> to <see cref="T:CQL.TypeSystem.Void"/>, because C# does not allow <see cref="T:System.Func`2"/> using the original type.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.TypeSystemBuilderExtensions.AddFromScan(CQL.TypeSystem.ITypeSystemBuilder,System.Type)">
            <summary>
            Scans type including its nested type for CQL types that could be registrated in this builder.
            </summary>
            <param name="this"></param>
            <param name="type"></param>
        </member>
        <member name="M:CQL.TypeSystem.TypeSystemBuilderExtensions.AddFromScan(CQL.TypeSystem.ITypeSystemBuilder,System.Reflection.Assembly)">
            <summary>
            Scans a assembly for all types with <see cref="T:CQL.TypeSystem.CQLTypeAttribute"/> and registers these types as CQL types in the builder.
            </summary>
            <param name="this"></param>
            <param name="assembly"></param>
        </member>
        <member name="T:CQL.TypeSystem.UnknownTypeException">
            <summary>
            Exception for types that are not in a given type system.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.UnknownTypeException.UnknownType">
            <summary>
            The unknown type.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.UnknownTypeException.#ctor(System.Type)">
            <summary>
            Creates a exception.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:CQL.TypeSystem.BinaryOperation">
            <summary>
            Binary operation rule.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.BinaryOperation.LeftType">
            <summary>
            Type of the left operand.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.BinaryOperation.RightType">
            <summary>
            Type of the right operand.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.BinaryOperation.ResultType">
            <summary>
            Type of the result.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.BinaryOperation.Operator">
            <summary>
            Used operator.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.BinaryOperation.Operation">
            <summary>
            Actual operation as lambda function.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.BinaryOperation.#ctor(System.Type,System.Type,System.Type,CQL.SyntaxTree.BinaryOperator,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Creates a binary operation.
            </summary>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="resultType"></param>
            <param name="operator"></param>
            <param name="operation"></param>
        </member>
        <member name="T:CQL.TypeSystem.CoercionKind">
            <summary>
            Kind of coercion rules
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.CoercionKind.Implicit">
            <summary>
            Implicit rules can be called during the validation process. New AST node could be included during this step.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.CoercionKind.Explicit">
            <summary>
            Explicit rules can only be used by writing a type name between two parentheses.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.CoercionRule">
            <summary>
            This rule class defines the conversion of an original type to a destination (casting) type.
            The rule can be implicit or explicit. Implicit rules can be applied during validation process.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.CoercionRule.Kind">
            <summary>
            Implicit or explicit.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.CoercionRule.OriginalType">
            <summary>
            Source type of conversion.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.CoercionRule.CastingType">
            <summary>
            Destination type of conversion.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.CoercionRule.Cast">
            <summary>
            The actual conversion method.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.CoercionRule.#ctor(CQL.TypeSystem.CoercionKind,System.Type,System.Type,System.Func{System.Object,System.Object})">
            <summary>
            Creates a coercion rule
            </summary>
            <param name="kind"></param>
            <param name="originalType"></param>
            <param name="castingType"></param>
            <param name="cast"></param>
        </member>
        <member name="T:CQL.TypeSystem.ITypeSystemBuilder">
            <summary>
            Helper for building type systems.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystemBuilder.AddType``1(System.String,System.String,CQL.TypeSystem.TypeDefaultFlags)">
            <summary>
            Adds a new type known in CQL under the given name. See <see cref="T:CQL.TypeSystem.TypeDefaultFlags"/> for default initialization.
            </summary>
            <typeparam name="TType">the new introduced type</typeparam>
            <param name="name"></param>
            <param name="usage"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystemBuilder.AddCoercionRule``2(CQL.TypeSystem.CoercionKind,System.Func{``0,``1})">
            <summary>
            Add a casting rule, implicit or explicit. Implicit rules will be applied during validation process if needed.
            </summary>
            <typeparam name="TOriginalType"></typeparam>
            <typeparam name="TCastingType"></typeparam>
            <param name="kind"></param>
            <param name="cast"></param>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystemBuilder.AddContainsRule``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Adds a containment rule "left contains right".
            </summary>
            <typeparam name="TLeft"></typeparam>
            <typeparam name="TRight"></typeparam>
            <param name="aggregate"></param>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystemBuilder.AddEqualsRule``1(System.Func{``0,``0,System.Boolean})">
            <summary>
            Adds an equality relation for a given type.
            </summary>
            <typeparam name="TOperand"></typeparam>
            <param name="aggregate"></param>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystemBuilder.AddLessRule``1(System.Func{``0,``0,System.Boolean})">
            <summary>
            The less rule is sufficient to realize all comparsion operations (greater, greater equals, less and less equals).
            </summary>
            <typeparam name="TOperand"></typeparam>
            <param name="aggregate"></param>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystemBuilder.AddRule``2(CQL.SyntaxTree.UnaryOperator,System.Func{``0,``1})">
            <summary>
            Low level function to add any unary operation.
            </summary>
            <typeparam name="TOperand"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="op"></param>
            <param name="func"></param>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystemBuilder.AddRule``3(CQL.SyntaxTree.BinaryOperator,System.Func{``0,``1,``2})">
            <summary>
            Low level function to add any binary operation.
            </summary>
            <typeparam name="TLeft"></typeparam>
            <typeparam name="TRight"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="op"></param>
            <param name="aggregate"></param>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystemBuilder.Build">
            <summary>
            Takes all added rules and creates a type system from these.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.IType">
            <summary>
            A non-generic type registered in a type system.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.IType.NativeType">
            <summary>
            The CSharp type.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.IType.GetByName(CQL.SyntaxTree.IdDelimiter,System.String)">
            <summary>
            Return a property by name.
            </summary>
            <param name="delimiter"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:CQL.TypeSystem.IType.Indexer">
            <summary>
            Is null when not defined.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CQL.TypeSystem.IType.Members">
            <summary>
            Returns all registered members (properties and functions).
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.IType.AddNativeFunction(CQL.SyntaxTree.IdDelimiter,System.String,System.Reflection.MethodInfo)">
            <summary>
            Adds a native member function by its <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType.AddNativeProperty(CQL.SyntaxTree.IdDelimiter,System.String,System.Reflection.PropertyInfo)">
            <summary>
            Adds a native member property by its <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="delimiter"></param>
            <param name="name"></param>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.IType.AddNativeIndexer(System.Reflection.PropertyInfo)">
            <summary>
            Adds a native indexer by its <see cref="T:System.Reflection.PropertyInfo"/>
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.TypeSystemExtensions">
            <summary>
            Extensions for <see cref="T:CQL.TypeSystem.ITypeSystem"/>.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.TypeSystemExtensions.ApplyCast(System.Collections.Generic.IEnumerable{CQL.TypeSystem.CoercionRule},CQL.SyntaxTree.IExpression,CQL.Contexts.IValidationScope,System.Func{System.Exception})">
            <summary>
            Applies a set of type casts to an expression. This will insert several cast expressions.
            </summary>
            <param name="this"></param>
            <param name="expression"></param>
            <param name="context"></param>
            <param name="generateError"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.TypeSystemExtensions.AlignTypes(CQL.Contexts.IValidationScope,CQL.SyntaxTree.IExpression@,CQL.SyntaxTree.IExpression@,System.Func{System.Exception})">
            <summary>
            Given to R-values, trys to unify both value's type by calling implicit type conversions.
            </summary>
            <param name="this"></param>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <param name="generateError"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.TypeSystem.UnaryOperation">
            <summary>
            Represents a unary operation.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.UnaryOperation.OperandType">
            <summary>
            Type of the operand.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.UnaryOperation.ResultType">
            <summary>
            Return type of the operation.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.UnaryOperation.Operator">
            <summary>
            The applied operator.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.UnaryOperation.Operation">
            <summary>
            Operation delegate which has to be applied to the input operand.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.UnaryOperation.#ctor(System.Type,System.Type,CQL.SyntaxTree.UnaryOperator,System.Func{System.Object,System.Object})">
            <summary>
            Creates an unary operation info object.
            </summary>
            <param name="operandType"></param>
            <param name="resultType"></param>
            <param name="operator"></param>
            <param name="operation"></param>
        </member>
        <member name="T:CQL.TypeSystem.ITypeSystem">
            <summary>
            A typesystem a a set of types and rules (operations, relations) between these types.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.ITypeSystem.Types">
            <summary>
            Returns all registered types.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystem.GetTypeByName(System.String)">
            <summary>
            Returns null or a type by its name which was used to register it (case insensitive).
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystem.GetTypesByPrefix(System.String)">
            <summary>
            Returns a set of types that start with the given prefix (case insensitive).
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystem.GetTypeByNative(System.Type)">
            <summary>
            Returns a registered type when passing the native type. Return null, if it can not be found.
            Throws an <see cref="T:CQL.TypeSystem.AmbigiousTypeException"/> when more than one type is possible.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystem.GetTypeByNative``1">
            <summary>
            <see cref="M:CQL.TypeSystem.ITypeSystem.GetTypeByNative(System.Type)"/>
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystem.GetCoercionRule(System.Type,System.Type)">
            <summary>
            Returns a coercion rule between two type, if it exists. NULL otherwise.
            </summary>
            <param name="original"></param>
            <param name="casting"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystem.GetImplicitlyCastChain(System.Type,System.Type)">
            <summary>
            Returns a chain of implicit casts for converting a variable of an original type into a destination type.
            </summary>
            <param name="original"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystem.GetImplicitlyCastsTo(System.Type)">
            <summary>
            Returns all possible implicit casts from a given type.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystem.GetBinaryOperation(CQL.SyntaxTree.BinaryOperator,System.Type,System.Type)">
            <summary>
            Returns a binary operation between two types if it exists. NULL otherwise.
            </summary>
            <param name="op"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystem.GetBinaryOperations">
            <summary>
            Returns all binary operations registered.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CQL.TypeSystem.ITypeSystem.GetUnaryOperation(CQL.SyntaxTree.UnaryOperator,System.Type)">
            <summary>
            Returns all unary operations registered.
            </summary>
            <param name="op"></param>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="P:CQL.TypeSystem.ITypeSystem.NullType">
            <summary>
            The null type.
            </summary>
        </member>
        <member name="P:CQL.TypeSystem.ITypeSystem.EmptyType">
            <summary>
            The empty type.
            </summary>
        </member>
        <member name="T:CQL.TypeSystem.AmbigiousTypeException">
            <summary>
            This exception describes the situation when a native type was resolved with more than one type in the type system.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.AmbigiousTypeException.GivenType">
            <summary>
            The requested type.
            </summary>
        </member>
        <member name="F:CQL.TypeSystem.AmbigiousTypeException.KnownTypes">
            <summary>
            The resolved types.
            </summary>
        </member>
        <member name="M:CQL.TypeSystem.AmbigiousTypeException.#ctor(System.Type,System.Collections.Generic.IEnumerable{CQL.TypeSystem.IType})">
            <summary>
            Creates the exception.
            </summary>
            <param name="type"></param>
            <param name="knownTypes"></param>
        </member>
        <member name="T:CQL.TypeSystem.Void">
            <summary>
            Replacement for <see cref="T:System.Void"/>
            </summary>
        </member>
        <member name="T:CQL.DictionaryExtensions">
            <summary>
            Extensions for dictionaries.
            </summary>
        </member>
        <member name="M:CQL.DictionaryExtensions.MergeWith``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1}[])">
            <summary>
            Merges THIS dictionary with other dictionaries and returns a new dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="this"></param>
            <param name="others"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.DictionaryExtensions.AlterValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1,``1},``1)">
            <summary>
            Alters a value in a dictionary. If not present it executes the action on a given default value.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="action"></param>
            <param name="default"></param>
        </member>
        <member name="M:CQL.DictionaryExtensions.GetValueOrInsertedDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets a value for the given key, or if the key does not exist, does insert a default value.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.DictionaryExtensions.GetValueOrInsertedLazyDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets a value for the given key, or if the key does not exist, does insert a default value lazyly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value for an existing key, or, if not existing, a default value. 
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="_this"></param>
            <param name="key"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.Queries">
            <summary>
            A facade for the user to quickly access the parser and evaluation API.
            </summary>
        </member>
        <member name="F:CQL.Queries.True">
            <summary>
            A query that returns true.
            </summary>
        </member>
        <member name="M:CQL.Queries.ParseForSyntaxOnly(System.String,CQL.ErrorHandling.IErrorListener)">
            <summary>
            Parses a user query (without validating it). You practically only get the syntax tree.
            </summary>
            <param name="text"></param>
            <param name="errorListener"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Queries.Parse(System.String,CQL.Contexts.IEvaluationScope,CQL.ErrorHandling.IErrorListener)">
            <summary>
            Parses AND validates a query string.
            </summary>
            <param name="text"></param>
            <param name="context"></param>
            <param name="errorListener"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Queries.AutoComplete(System.String,CQL.Contexts.IEvaluationScope)">
            <summary>
            Trys to complete the user input by a given context.
            </summary>
            <param name="textUntilCaret"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Queries.Evaluate``1(System.String,``0,CQL.Contexts.IEvaluationScope,CQL.ErrorHandling.IErrorListener)">
            <summary>
            Evaluates a user query string with a given context and an optional error listener.
            If no listener is given, this method will throw exceptions instead.
            Do not use this method if you want to evaluate a query for multiple subjects.
            Use <see cref="M:CQL.Queries.Parse(System.String,CQL.Contexts.IEvaluationScope,CQL.ErrorHandling.IErrorListener)"/> instead in combination
            with <see cref="M:CQL.SyntaxTree.Query.Evaluate(CQL.Contexts.IEvaluationScope)"/>.
            </summary>
            <typeparam name="TSubject"></typeparam>
            <param name="text"></param>
            <param name="subject"></param>
            <param name="context"></param>
            <param name="errorListener"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.StringExtensions">
            <summary>
            Contains extensions for strings.
            </summary>
        </member>
        <member name="M:CQL.StringExtensions.Escape(System.String)">
            <summary>
            Escapes a string from special charaters, using the C# compiler environment.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.StringExtensions.Unescape(System.String)">
            <summary>
            Unescapes an escaped string.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.Visitors.ExpressionsVisitor">
            <summary>
            Visitor that produces a list of expressions.
            </summary>
        </member>
        <member name="M:CQL.Visitors.ExpressionsVisitor.#ctor(CQL.Visitors.ExpressionVisitor)">
            <summary>
            Creates a visitor producing lists of expressions, like parameter list etc.
            </summary>
            <param name="exprVisitor"></param>
        </member>
        <member name="M:CQL.Visitors.ExpressionsVisitor.VisitElemList(CQL.CQLParser.ElemListContext)">
            <summary>
            Returns expression list from parser's <see cref="T:CQL.CQLParser.ElemListContext"/>.
            Represents a list of multiple expressions.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionsVisitor.VisitParamList(CQL.CQLParser.ParamListContext)">
            <summary>
            Returns expression list from parser's <see cref="T:CQL.CQLParser.ParamListContext"/>.
            Represents multiple expressions in a parameter list.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionsVisitor.VisitParamSingle(CQL.CQLParser.ParamSingleContext)">
            <summary>
            Returns expression list from parser's <see cref="T:CQL.CQLParser.ParamSingleContext"/>.
            Represents one expression of a parameter list.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionsVisitor.VisitElemSingle(CQL.CQLParser.ElemSingleContext)">
            <summary>
            Returns expression list from parser's <see cref="T:CQL.CQLParser.ElemSingleContext"/>.
            Represents one expression of a list.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.Visitors.ExpressionVisitor">
            <summary>
            Visitor producing <see cref="T:CQL.SyntaxTree.IExpression"/> objects from parts of the abstract syntax tree (AST).
            </summary>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.#ctor">
            <summary>
            Creates the expression visitor.
            </summary>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitExpression(CQL.CQLParser.ExpressionContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.ExpressionContext"/>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitConditional(CQL.CQLParser.ConditionalContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.ConditionalContext"/>.
            Represents the ternary ?-operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitOr(CQL.CQLParser.OrContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.OrContext"/>.
            Represents the OR-operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitAnd(CQL.CQLParser.AndContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.AndContext"/>.
            Represents the AND operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitEquals(CQL.CQLParser.EqualsContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.EqualsContext"/>
            Represents the = operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitNotEquals(CQL.CQLParser.NotEqualsContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.NotEqualsContext"/>.
            Represents the != operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitGt(CQL.CQLParser.GtContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.GtContext"/>.
            Represents the &gt; operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitGte(CQL.CQLParser.GteContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.GteContext"/>.
            Represents the &gt;= operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitLt(CQL.CQLParser.LtContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.LtContext"/>.
            Represents the &lt; operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitLte(CQL.CQLParser.LteContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.LteContext"/>.
            Represents &lt;= operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitPlus(CQL.CQLParser.PlusContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.PlusContext"/>.
            Represents addition + operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitMinus(CQL.CQLParser.MinusContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.MinusContext"/>.
            Represents substraction.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitMul(CQL.CQLParser.MulContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.MulContext"/>.
            Represents multiplication.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitDiv(CQL.CQLParser.DivContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.DivContext"/>.
            Represents division.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitMod(CQL.CQLParser.ModContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.ModContext"/>.
            Represents modulo operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitContains(CQL.CQLParser.ContainsContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.ContainsContext"/>.
            Represents contains operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitDoesNotContain(CQL.CQLParser.DoesNotContainContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.DoesNotContainContext"/>.
            Represents the "does not contain" operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitIs(CQL.CQLParser.IsContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.IsContext"/>.
            Represents the IS operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitIn(CQL.CQLParser.InContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.InContext"/>.
            Represents the IN operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitNotIn(CQL.CQLParser.NotInContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.NotInContext"/>.
            Represents the NOT IN operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitExpr(CQL.CQLParser.ExprContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.ExprContext"/>.
            Represents a expression surrounded by parentheses.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitNotFactor(CQL.CQLParser.NotFactorContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.NotFactorContext"/>.
            Represents the NOT operator.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitMinusFactor(CQL.CQLParser.MinusFactorContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.MinusFactorContext"/>.
            Represents numerical negation.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitComplexFactor(CQL.CQLParser.ComplexFactorContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.ComplexFactorContext"/>.
            Represents complex factors like array access, property lookup or function call.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitPlusFactor(CQL.CQLParser.PlusFactorContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.PlusFactorContext"/>.
            Represents unary plus.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitConst(CQL.CQLParser.ConstContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.ConstContext"/>.
            Represents several literals.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitLs(CQL.CQLParser.LsContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.LsContext"/>.
            Represents array literals.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitBraceElems(CQL.CQLParser.BraceElemsContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.BraceElemsContext"/>.
            Represents array literals, too.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitBracketElems(CQL.CQLParser.BracketElemsContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.BracketElemsContext"/>.
            Represents array literal.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitBool(CQL.CQLParser.BoolContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.BoolContext"/>.
            Represents bool literals.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitDecimal(CQL.CQLParser.DecimalContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.DecimalContext"/>.
            Represents integer and float literals.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitEmpty(CQL.CQLParser.EmptyContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.EmptyContext"/>.
            Represents the EMPTY literal.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitNull(CQL.CQLParser.NullContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.NullContext"/>.
            Represents a NULL literal.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitString(CQL.CQLParser.StringContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.StringContext"/>.
            Represents a string literal.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitCastFactor(CQL.CQLParser.CastFactorContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.CastFactorContext"/>.
            Represents a type casting expression.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.ExpressionVisitor.VisitVarExp(CQL.CQLParser.VarExpContext)">
            <summary>
            Returns expression from parser's <see cref="T:CQL.CQLParser.VarExpContext"/>.
            Represents a variable usage.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.Visitors.NameVisitor">
            <summary>
            Visitor producing <see cref="T:System.String"/> names from parts of the abstract syntax tree (AST).
            </summary>
        </member>
        <member name="M:CQL.Visitors.NameVisitor.VisitMemberName(CQL.CQLParser.MemberNameContext)">
            <summary>
            Returns name from parser's <see cref="T:CQL.CQLParser.MemberNameContext"/>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.NameVisitor.VisitTypeName(CQL.CQLParser.TypeNameContext)">
            <summary>
            Returns name from parser's <see cref="T:CQL.CQLParser.TypeNameContext"/>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.NameVisitor.VisitTrue(CQL.CQLParser.TrueContext)">
            <summary>
            Returns name from parser's <see cref="T:CQL.CQLParser.TrueContext"/>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.NameVisitor.VisitFalse(CQL.CQLParser.FalseContext)">
            <summary>
            Returns name from parser's <see cref="T:CQL.CQLParser.FalseContext"/>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CQL.Visitors.NameVisitor.VisitPrimeVar(CQL.CQLParser.PrimeVarContext)">
            <summary>
            Returns name from parser's <see cref="T:CQL.CQLParser.PrimeVarContext"/>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.Visitors.QueryVisitor">
            <summary>
            Visitor producing <see cref="T:CQL.SyntaxTree.Query"/> objects from parts of the abstract syntax tree (AST).
            </summary>
        </member>
        <member name="M:CQL.Visitors.QueryVisitor.#ctor">
            <summary>
            Creates a query visitor.
            </summary>
        </member>
        <member name="M:CQL.Visitors.QueryVisitor.VisitQuery(CQL.CQLParser.QueryContext)">
            <summary>
            Returns query from parser's <see cref="T:CQL.CQLParser.QueryContext"/>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CQL.ICQLListener">
            <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:CQL.CQLParser"/>.
            </summary>
        </member>
        <member name="M:CQL.ICQLListener.EnterString(CQL.CQLParser.StringContext)">
            <summary>
            Enter a parse tree produced by the <c>string</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitString(CQL.CQLParser.StringContext)">
            <summary>
            Exit a parse tree produced by the <c>string</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterNull(CQL.CQLParser.NullContext)">
            <summary>
            Enter a parse tree produced by the <c>null</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitNull(CQL.CQLParser.NullContext)">
            <summary>
            Exit a parse tree produced by the <c>null</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterBool(CQL.CQLParser.BoolContext)">
            <summary>
            Enter a parse tree produced by the <c>bool</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitBool(CQL.CQLParser.BoolContext)">
            <summary>
            Exit a parse tree produced by the <c>bool</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterDecimal(CQL.CQLParser.DecimalContext)">
            <summary>
            Enter a parse tree produced by the <c>decimal</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitDecimal(CQL.CQLParser.DecimalContext)">
            <summary>
            Exit a parse tree produced by the <c>decimal</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterEmpty(CQL.CQLParser.EmptyContext)">
            <summary>
            Enter a parse tree produced by the <c>empty</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitEmpty(CQL.CQLParser.EmptyContext)">
            <summary>
            Exit a parse tree produced by the <c>empty</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterMinus(CQL.CQLParser.MinusContext)">
            <summary>
            Enter a parse tree produced by the <c>minus</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitMinus(CQL.CQLParser.MinusContext)">
            <summary>
            Exit a parse tree produced by the <c>minus</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterPlus(CQL.CQLParser.PlusContext)">
            <summary>
            Enter a parse tree produced by the <c>plus</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitPlus(CQL.CQLParser.PlusContext)">
            <summary>
            Exit a parse tree produced by the <c>plus</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterToMul(CQL.CQLParser.ToMulContext)">
            <summary>
            Enter a parse tree produced by the <c>toMul</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitToMul(CQL.CQLParser.ToMulContext)">
            <summary>
            Exit a parse tree produced by the <c>toMul</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterArrayAccess(CQL.CQLParser.ArrayAccessContext)">
            <summary>
            Enter a parse tree produced by the <c>arrayAccess</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitArrayAccess(CQL.CQLParser.ArrayAccessContext)">
            <summary>
            Exit a parse tree produced by the <c>arrayAccess</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterMethodCall(CQL.CQLParser.MethodCallContext)">
            <summary>
            Enter a parse tree produced by the <c>methodCall</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitMethodCall(CQL.CQLParser.MethodCallContext)">
            <summary>
            Exit a parse tree produced by the <c>methodCall</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterMemberCall(CQL.CQLParser.MemberCallContext)">
            <summary>
            Enter a parse tree produced by the <c>memberCall</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitMemberCall(CQL.CQLParser.MemberCallContext)">
            <summary>
            Exit a parse tree produced by the <c>memberCall</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterBraceElems(CQL.CQLParser.BraceElemsContext)">
            <summary>
            Enter a parse tree produced by the <c>braceElems</c>
            labeled alternative in <see cref="M:CQL.CQLParser.list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitBraceElems(CQL.CQLParser.BraceElemsContext)">
            <summary>
            Exit a parse tree produced by the <c>braceElems</c>
            labeled alternative in <see cref="M:CQL.CQLParser.list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterBracketElems(CQL.CQLParser.BracketElemsContext)">
            <summary>
            Enter a parse tree produced by the <c>bracketElems</c>
            labeled alternative in <see cref="M:CQL.CQLParser.list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitBracketElems(CQL.CQLParser.BracketElemsContext)">
            <summary>
            Exit a parse tree produced by the <c>bracketElems</c>
            labeled alternative in <see cref="M:CQL.CQLParser.list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterOr(CQL.CQLParser.OrContext)">
            <summary>
            Enter a parse tree produced by the <c>or</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitOr(CQL.CQLParser.OrContext)">
            <summary>
            Exit a parse tree produced by the <c>or</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterToAnd(CQL.CQLParser.ToAndContext)">
            <summary>
            Enter a parse tree produced by the <c>toAnd</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitToAnd(CQL.CQLParser.ToAndContext)">
            <summary>
            Exit a parse tree produced by the <c>toAnd</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterToEquals(CQL.CQLParser.ToEqualsContext)">
            <summary>
            Enter a parse tree produced by the <c>toEquals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitToEquals(CQL.CQLParser.ToEqualsContext)">
            <summary>
            Exit a parse tree produced by the <c>toEquals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterAnd(CQL.CQLParser.AndContext)">
            <summary>
            Enter a parse tree produced by the <c>and</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitAnd(CQL.CQLParser.AndContext)">
            <summary>
            Exit a parse tree produced by the <c>and</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterEquals(CQL.CQLParser.EqualsContext)">
            <summary>
            Enter a parse tree produced by the <c>equals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitEquals(CQL.CQLParser.EqualsContext)">
            <summary>
            Exit a parse tree produced by the <c>equals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterNotEquals(CQL.CQLParser.NotEqualsContext)">
            <summary>
            Enter a parse tree produced by the <c>notEquals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitNotEquals(CQL.CQLParser.NotEqualsContext)">
            <summary>
            Exit a parse tree produced by the <c>notEquals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterToCompare(CQL.CQLParser.ToCompareContext)">
            <summary>
            Enter a parse tree produced by the <c>toCompare</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitToCompare(CQL.CQLParser.ToCompareContext)">
            <summary>
            Exit a parse tree produced by the <c>toCompare</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterDiv(CQL.CQLParser.DivContext)">
            <summary>
            Enter a parse tree produced by the <c>div</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitDiv(CQL.CQLParser.DivContext)">
            <summary>
            Exit a parse tree produced by the <c>div</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterMod(CQL.CQLParser.ModContext)">
            <summary>
            Enter a parse tree produced by the <c>mod</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitMod(CQL.CQLParser.ModContext)">
            <summary>
            Exit a parse tree produced by the <c>mod</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterMul(CQL.CQLParser.MulContext)">
            <summary>
            Enter a parse tree produced by the <c>mul</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitMul(CQL.CQLParser.MulContext)">
            <summary>
            Exit a parse tree produced by the <c>mul</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterToSpecial(CQL.CQLParser.ToSpecialContext)">
            <summary>
            Enter a parse tree produced by the <c>toSpecial</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitToSpecial(CQL.CQLParser.ToSpecialContext)">
            <summary>
            Exit a parse tree produced by the <c>toSpecial</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterMemberName(CQL.CQLParser.MemberNameContext)">
            <summary>
            Enter a parse tree produced by the <c>memberName</c>
            labeled alternative in <see cref="M:CQL.CQLParser.member"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitMemberName(CQL.CQLParser.MemberNameContext)">
            <summary>
            Exit a parse tree produced by the <c>memberName</c>
            labeled alternative in <see cref="M:CQL.CQLParser.member"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterConditional(CQL.CQLParser.ConditionalContext)">
            <summary>
            Enter a parse tree produced by the <c>conditional</c>
            labeled alternative in <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitConditional(CQL.CQLParser.ConditionalContext)">
            <summary>
            Exit a parse tree produced by the <c>conditional</c>
            labeled alternative in <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterToOr(CQL.CQLParser.ToOrContext)">
            <summary>
            Enter a parse tree produced by the <c>toOr</c>
            labeled alternative in <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitToOr(CQL.CQLParser.ToOrContext)">
            <summary>
            Exit a parse tree produced by the <c>toOr</c>
            labeled alternative in <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterParamSingle(CQL.CQLParser.ParamSingleContext)">
            <summary>
            Enter a parse tree produced by the <c>paramSingle</c>
            labeled alternative in <see cref="M:CQL.CQLParser.parameterList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitParamSingle(CQL.CQLParser.ParamSingleContext)">
            <summary>
            Exit a parse tree produced by the <c>paramSingle</c>
            labeled alternative in <see cref="M:CQL.CQLParser.parameterList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterParamList(CQL.CQLParser.ParamListContext)">
            <summary>
            Enter a parse tree produced by the <c>paramList</c>
            labeled alternative in <see cref="M:CQL.CQLParser.parameterList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitParamList(CQL.CQLParser.ParamListContext)">
            <summary>
            Exit a parse tree produced by the <c>paramList</c>
            labeled alternative in <see cref="M:CQL.CQLParser.parameterList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterToAdd(CQL.CQLParser.ToAddContext)">
            <summary>
            Enter a parse tree produced by the <c>toAdd</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitToAdd(CQL.CQLParser.ToAddContext)">
            <summary>
            Exit a parse tree produced by the <c>toAdd</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterLt(CQL.CQLParser.LtContext)">
            <summary>
            Enter a parse tree produced by the <c>lt</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitLt(CQL.CQLParser.LtContext)">
            <summary>
            Exit a parse tree produced by the <c>lt</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterGte(CQL.CQLParser.GteContext)">
            <summary>
            Enter a parse tree produced by the <c>gte</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitGte(CQL.CQLParser.GteContext)">
            <summary>
            Exit a parse tree produced by the <c>gte</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterLte(CQL.CQLParser.LteContext)">
            <summary>
            Enter a parse tree produced by the <c>lte</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitLte(CQL.CQLParser.LteContext)">
            <summary>
            Exit a parse tree produced by the <c>lte</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterGt(CQL.CQLParser.GtContext)">
            <summary>
            Enter a parse tree produced by the <c>gt</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitGt(CQL.CQLParser.GtContext)">
            <summary>
            Exit a parse tree produced by the <c>gt</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterContains(CQL.CQLParser.ContainsContext)">
            <summary>
            Enter a parse tree produced by the <c>contains</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitContains(CQL.CQLParser.ContainsContext)">
            <summary>
            Exit a parse tree produced by the <c>contains</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterDoesNotContain(CQL.CQLParser.DoesNotContainContext)">
            <summary>
            Enter a parse tree produced by the <c>doesNotContain</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitDoesNotContain(CQL.CQLParser.DoesNotContainContext)">
            <summary>
            Exit a parse tree produced by the <c>doesNotContain</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterIn(CQL.CQLParser.InContext)">
            <summary>
            Enter a parse tree produced by the <c>in</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitIn(CQL.CQLParser.InContext)">
            <summary>
            Exit a parse tree produced by the <c>in</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterNotIn(CQL.CQLParser.NotInContext)">
            <summary>
            Enter a parse tree produced by the <c>notIn</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitNotIn(CQL.CQLParser.NotInContext)">
            <summary>
            Exit a parse tree produced by the <c>notIn</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterIs(CQL.CQLParser.IsContext)">
            <summary>
            Enter a parse tree produced by the <c>is</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitIs(CQL.CQLParser.IsContext)">
            <summary>
            Exit a parse tree produced by the <c>is</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterToFactor(CQL.CQLParser.ToFactorContext)">
            <summary>
            Enter a parse tree produced by the <c>toFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitToFactor(CQL.CQLParser.ToFactorContext)">
            <summary>
            Exit a parse tree produced by the <c>toFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterComplexFactor(CQL.CQLParser.ComplexFactorContext)">
            <summary>
            Enter a parse tree produced by the <c>complexFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.factor"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitComplexFactor(CQL.CQLParser.ComplexFactorContext)">
            <summary>
            Exit a parse tree produced by the <c>complexFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.factor"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterElemSingle(CQL.CQLParser.ElemSingleContext)">
            <summary>
            Enter a parse tree produced by the <c>elemSingle</c>
            labeled alternative in <see cref="M:CQL.CQLParser.elementList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitElemSingle(CQL.CQLParser.ElemSingleContext)">
            <summary>
            Exit a parse tree produced by the <c>elemSingle</c>
            labeled alternative in <see cref="M:CQL.CQLParser.elementList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterElemList(CQL.CQLParser.ElemListContext)">
            <summary>
            Enter a parse tree produced by the <c>elemList</c>
            labeled alternative in <see cref="M:CQL.CQLParser.elementList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitElemList(CQL.CQLParser.ElemListContext)">
            <summary>
            Exit a parse tree produced by the <c>elemList</c>
            labeled alternative in <see cref="M:CQL.CQLParser.elementList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterTrue(CQL.CQLParser.TrueContext)">
            <summary>
            Enter a parse tree produced by the <c>true</c>
            labeled alternative in <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitTrue(CQL.CQLParser.TrueContext)">
            <summary>
            Exit a parse tree produced by the <c>true</c>
            labeled alternative in <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterFalse(CQL.CQLParser.FalseContext)">
            <summary>
            Enter a parse tree produced by the <c>false</c>
            labeled alternative in <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitFalse(CQL.CQLParser.FalseContext)">
            <summary>
            Exit a parse tree produced by the <c>false</c>
            labeled alternative in <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterVarExp(CQL.CQLParser.VarExpContext)">
            <summary>
            Enter a parse tree produced by the <c>varExp</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitVarExp(CQL.CQLParser.VarExpContext)">
            <summary>
            Exit a parse tree produced by the <c>varExp</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterConst(CQL.CQLParser.ConstContext)">
            <summary>
            Enter a parse tree produced by the <c>const</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitConst(CQL.CQLParser.ConstContext)">
            <summary>
            Exit a parse tree produced by the <c>const</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterPlusFactor(CQL.CQLParser.PlusFactorContext)">
            <summary>
            Enter a parse tree produced by the <c>plusFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitPlusFactor(CQL.CQLParser.PlusFactorContext)">
            <summary>
            Exit a parse tree produced by the <c>plusFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterNotFactor(CQL.CQLParser.NotFactorContext)">
            <summary>
            Enter a parse tree produced by the <c>notFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitNotFactor(CQL.CQLParser.NotFactorContext)">
            <summary>
            Exit a parse tree produced by the <c>notFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterLs(CQL.CQLParser.LsContext)">
            <summary>
            Enter a parse tree produced by the <c>ls</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitLs(CQL.CQLParser.LsContext)">
            <summary>
            Exit a parse tree produced by the <c>ls</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterMinusFactor(CQL.CQLParser.MinusFactorContext)">
            <summary>
            Enter a parse tree produced by the <c>minusFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitMinusFactor(CQL.CQLParser.MinusFactorContext)">
            <summary>
            Exit a parse tree produced by the <c>minusFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterCastFactor(CQL.CQLParser.CastFactorContext)">
            <summary>
            Enter a parse tree produced by the <c>castFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitCastFactor(CQL.CQLParser.CastFactorContext)">
            <summary>
            Exit a parse tree produced by the <c>castFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterExpr(CQL.CQLParser.ExprContext)">
            <summary>
            Enter a parse tree produced by the <c>expr</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitExpr(CQL.CQLParser.ExprContext)">
            <summary>
            Exit a parse tree produced by the <c>expr</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterQuery(CQL.CQLParser.QueryContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.query"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitQuery(CQL.CQLParser.QueryContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.query"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterExpression(CQL.CQLParser.ExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitExpression(CQL.CQLParser.ExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterIfThenElseTerm(CQL.CQLParser.IfThenElseTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitIfThenElseTerm(CQL.CQLParser.IfThenElseTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterLogicalOrTerm(CQL.CQLParser.LogicalOrTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitLogicalOrTerm(CQL.CQLParser.LogicalOrTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterLogicalAndTerm(CQL.CQLParser.LogicalAndTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitLogicalAndTerm(CQL.CQLParser.LogicalAndTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterEqualsTerm(CQL.CQLParser.EqualsTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.equalsTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitEqualsTerm(CQL.CQLParser.EqualsTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.equalsTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterCompareTerm(CQL.CQLParser.CompareTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitCompareTerm(CQL.CQLParser.CompareTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterAddTerm(CQL.CQLParser.AddTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.addTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitAddTerm(CQL.CQLParser.AddTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.addTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterMulTerm(CQL.CQLParser.MulTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitMulTerm(CQL.CQLParser.MulTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterSpecialTerm(CQL.CQLParser.SpecialTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitSpecialTerm(CQL.CQLParser.SpecialTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterFactor(CQL.CQLParser.FactorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.factor"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitFactor(CQL.CQLParser.FactorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.factor"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterChain_element(CQL.CQLParser.Chain_elementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.chain_element"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitChain_element(CQL.CQLParser.Chain_elementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.chain_element"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterPrimary(CQL.CQLParser.PrimaryContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitPrimary(CQL.CQLParser.PrimaryContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterPrimeVar(CQL.CQLParser.PrimeVarContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.primeVar"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitPrimeVar(CQL.CQLParser.PrimeVarContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.primeVar"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterMember(CQL.CQLParser.MemberContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.member"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitMember(CQL.CQLParser.MemberContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.member"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterTypeName(CQL.CQLParser.TypeNameContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.typeName"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitTypeName(CQL.CQLParser.TypeNameContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.typeName"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterList(CQL.CQLParser.ListContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitList(CQL.CQLParser.ListContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterElementList(CQL.CQLParser.ElementListContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.elementList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitElementList(CQL.CQLParser.ElementListContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.elementList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterParameterList(CQL.CQLParser.ParameterListContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.parameterList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitParameterList(CQL.CQLParser.ParameterListContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.parameterList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterConstant(CQL.CQLParser.ConstantContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitConstant(CQL.CQLParser.ConstantContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterBooleanLiteral(CQL.CQLParser.BooleanLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitBooleanLiteral(CQL.CQLParser.BooleanLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterNullLiteral(CQL.CQLParser.NullLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.nullLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitNullLiteral(CQL.CQLParser.NullLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.nullLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.EnterEmptyLiteral(CQL.CQLParser.EmptyLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.emptyLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.ICQLListener.ExitEmptyLiteral(CQL.CQLParser.EmptyLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.emptyLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="T:CQL.CQLBaseListener">
            <summary>
            This class provides an empty implementation of <see cref="T:CQL.ICQLListener"/>,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterString(CQL.CQLParser.StringContext)">
            <summary>
            Enter a parse tree produced by the <c>string</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitString(CQL.CQLParser.StringContext)">
            <summary>
            Exit a parse tree produced by the <c>string</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterNull(CQL.CQLParser.NullContext)">
            <summary>
            Enter a parse tree produced by the <c>null</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitNull(CQL.CQLParser.NullContext)">
            <summary>
            Exit a parse tree produced by the <c>null</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterBool(CQL.CQLParser.BoolContext)">
            <summary>
            Enter a parse tree produced by the <c>bool</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitBool(CQL.CQLParser.BoolContext)">
            <summary>
            Exit a parse tree produced by the <c>bool</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterDecimal(CQL.CQLParser.DecimalContext)">
            <summary>
            Enter a parse tree produced by the <c>decimal</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitDecimal(CQL.CQLParser.DecimalContext)">
            <summary>
            Exit a parse tree produced by the <c>decimal</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterEmpty(CQL.CQLParser.EmptyContext)">
            <summary>
            Enter a parse tree produced by the <c>empty</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitEmpty(CQL.CQLParser.EmptyContext)">
            <summary>
            Exit a parse tree produced by the <c>empty</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterMinus(CQL.CQLParser.MinusContext)">
            <summary>
            Enter a parse tree produced by the <c>minus</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitMinus(CQL.CQLParser.MinusContext)">
            <summary>
            Exit a parse tree produced by the <c>minus</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterPlus(CQL.CQLParser.PlusContext)">
            <summary>
            Enter a parse tree produced by the <c>plus</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitPlus(CQL.CQLParser.PlusContext)">
            <summary>
            Exit a parse tree produced by the <c>plus</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterToMul(CQL.CQLParser.ToMulContext)">
            <summary>
            Enter a parse tree produced by the <c>toMul</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitToMul(CQL.CQLParser.ToMulContext)">
            <summary>
            Exit a parse tree produced by the <c>toMul</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterArrayAccess(CQL.CQLParser.ArrayAccessContext)">
            <summary>
            Enter a parse tree produced by the <c>arrayAccess</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitArrayAccess(CQL.CQLParser.ArrayAccessContext)">
            <summary>
            Exit a parse tree produced by the <c>arrayAccess</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterMethodCall(CQL.CQLParser.MethodCallContext)">
            <summary>
            Enter a parse tree produced by the <c>methodCall</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitMethodCall(CQL.CQLParser.MethodCallContext)">
            <summary>
            Exit a parse tree produced by the <c>methodCall</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterMemberCall(CQL.CQLParser.MemberCallContext)">
            <summary>
            Enter a parse tree produced by the <c>memberCall</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitMemberCall(CQL.CQLParser.MemberCallContext)">
            <summary>
            Exit a parse tree produced by the <c>memberCall</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterBraceElems(CQL.CQLParser.BraceElemsContext)">
            <summary>
            Enter a parse tree produced by the <c>braceElems</c>
            labeled alternative in <see cref="M:CQL.CQLParser.list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitBraceElems(CQL.CQLParser.BraceElemsContext)">
            <summary>
            Exit a parse tree produced by the <c>braceElems</c>
            labeled alternative in <see cref="M:CQL.CQLParser.list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterBracketElems(CQL.CQLParser.BracketElemsContext)">
            <summary>
            Enter a parse tree produced by the <c>bracketElems</c>
            labeled alternative in <see cref="M:CQL.CQLParser.list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitBracketElems(CQL.CQLParser.BracketElemsContext)">
            <summary>
            Exit a parse tree produced by the <c>bracketElems</c>
            labeled alternative in <see cref="M:CQL.CQLParser.list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterOr(CQL.CQLParser.OrContext)">
            <summary>
            Enter a parse tree produced by the <c>or</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitOr(CQL.CQLParser.OrContext)">
            <summary>
            Exit a parse tree produced by the <c>or</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterToAnd(CQL.CQLParser.ToAndContext)">
            <summary>
            Enter a parse tree produced by the <c>toAnd</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitToAnd(CQL.CQLParser.ToAndContext)">
            <summary>
            Exit a parse tree produced by the <c>toAnd</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterToEquals(CQL.CQLParser.ToEqualsContext)">
            <summary>
            Enter a parse tree produced by the <c>toEquals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitToEquals(CQL.CQLParser.ToEqualsContext)">
            <summary>
            Exit a parse tree produced by the <c>toEquals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterAnd(CQL.CQLParser.AndContext)">
            <summary>
            Enter a parse tree produced by the <c>and</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitAnd(CQL.CQLParser.AndContext)">
            <summary>
            Exit a parse tree produced by the <c>and</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterEquals(CQL.CQLParser.EqualsContext)">
            <summary>
            Enter a parse tree produced by the <c>equals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitEquals(CQL.CQLParser.EqualsContext)">
            <summary>
            Exit a parse tree produced by the <c>equals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterNotEquals(CQL.CQLParser.NotEqualsContext)">
            <summary>
            Enter a parse tree produced by the <c>notEquals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitNotEquals(CQL.CQLParser.NotEqualsContext)">
            <summary>
            Exit a parse tree produced by the <c>notEquals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterToCompare(CQL.CQLParser.ToCompareContext)">
            <summary>
            Enter a parse tree produced by the <c>toCompare</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitToCompare(CQL.CQLParser.ToCompareContext)">
            <summary>
            Exit a parse tree produced by the <c>toCompare</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterDiv(CQL.CQLParser.DivContext)">
            <summary>
            Enter a parse tree produced by the <c>div</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitDiv(CQL.CQLParser.DivContext)">
            <summary>
            Exit a parse tree produced by the <c>div</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterMod(CQL.CQLParser.ModContext)">
            <summary>
            Enter a parse tree produced by the <c>mod</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitMod(CQL.CQLParser.ModContext)">
            <summary>
            Exit a parse tree produced by the <c>mod</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterMul(CQL.CQLParser.MulContext)">
            <summary>
            Enter a parse tree produced by the <c>mul</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitMul(CQL.CQLParser.MulContext)">
            <summary>
            Exit a parse tree produced by the <c>mul</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterToSpecial(CQL.CQLParser.ToSpecialContext)">
            <summary>
            Enter a parse tree produced by the <c>toSpecial</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitToSpecial(CQL.CQLParser.ToSpecialContext)">
            <summary>
            Exit a parse tree produced by the <c>toSpecial</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterMemberName(CQL.CQLParser.MemberNameContext)">
            <summary>
            Enter a parse tree produced by the <c>memberName</c>
            labeled alternative in <see cref="M:CQL.CQLParser.member"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitMemberName(CQL.CQLParser.MemberNameContext)">
            <summary>
            Exit a parse tree produced by the <c>memberName</c>
            labeled alternative in <see cref="M:CQL.CQLParser.member"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterConditional(CQL.CQLParser.ConditionalContext)">
            <summary>
            Enter a parse tree produced by the <c>conditional</c>
            labeled alternative in <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitConditional(CQL.CQLParser.ConditionalContext)">
            <summary>
            Exit a parse tree produced by the <c>conditional</c>
            labeled alternative in <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterToOr(CQL.CQLParser.ToOrContext)">
            <summary>
            Enter a parse tree produced by the <c>toOr</c>
            labeled alternative in <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitToOr(CQL.CQLParser.ToOrContext)">
            <summary>
            Exit a parse tree produced by the <c>toOr</c>
            labeled alternative in <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterParamSingle(CQL.CQLParser.ParamSingleContext)">
            <summary>
            Enter a parse tree produced by the <c>paramSingle</c>
            labeled alternative in <see cref="M:CQL.CQLParser.parameterList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitParamSingle(CQL.CQLParser.ParamSingleContext)">
            <summary>
            Exit a parse tree produced by the <c>paramSingle</c>
            labeled alternative in <see cref="M:CQL.CQLParser.parameterList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterParamList(CQL.CQLParser.ParamListContext)">
            <summary>
            Enter a parse tree produced by the <c>paramList</c>
            labeled alternative in <see cref="M:CQL.CQLParser.parameterList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitParamList(CQL.CQLParser.ParamListContext)">
            <summary>
            Exit a parse tree produced by the <c>paramList</c>
            labeled alternative in <see cref="M:CQL.CQLParser.parameterList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterToAdd(CQL.CQLParser.ToAddContext)">
            <summary>
            Enter a parse tree produced by the <c>toAdd</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitToAdd(CQL.CQLParser.ToAddContext)">
            <summary>
            Exit a parse tree produced by the <c>toAdd</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterLt(CQL.CQLParser.LtContext)">
            <summary>
            Enter a parse tree produced by the <c>lt</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitLt(CQL.CQLParser.LtContext)">
            <summary>
            Exit a parse tree produced by the <c>lt</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterGte(CQL.CQLParser.GteContext)">
            <summary>
            Enter a parse tree produced by the <c>gte</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitGte(CQL.CQLParser.GteContext)">
            <summary>
            Exit a parse tree produced by the <c>gte</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterLte(CQL.CQLParser.LteContext)">
            <summary>
            Enter a parse tree produced by the <c>lte</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitLte(CQL.CQLParser.LteContext)">
            <summary>
            Exit a parse tree produced by the <c>lte</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterGt(CQL.CQLParser.GtContext)">
            <summary>
            Enter a parse tree produced by the <c>gt</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitGt(CQL.CQLParser.GtContext)">
            <summary>
            Exit a parse tree produced by the <c>gt</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterContains(CQL.CQLParser.ContainsContext)">
            <summary>
            Enter a parse tree produced by the <c>contains</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitContains(CQL.CQLParser.ContainsContext)">
            <summary>
            Exit a parse tree produced by the <c>contains</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterDoesNotContain(CQL.CQLParser.DoesNotContainContext)">
            <summary>
            Enter a parse tree produced by the <c>doesNotContain</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitDoesNotContain(CQL.CQLParser.DoesNotContainContext)">
            <summary>
            Exit a parse tree produced by the <c>doesNotContain</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterIn(CQL.CQLParser.InContext)">
            <summary>
            Enter a parse tree produced by the <c>in</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitIn(CQL.CQLParser.InContext)">
            <summary>
            Exit a parse tree produced by the <c>in</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterNotIn(CQL.CQLParser.NotInContext)">
            <summary>
            Enter a parse tree produced by the <c>notIn</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitNotIn(CQL.CQLParser.NotInContext)">
            <summary>
            Exit a parse tree produced by the <c>notIn</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterIs(CQL.CQLParser.IsContext)">
            <summary>
            Enter a parse tree produced by the <c>is</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitIs(CQL.CQLParser.IsContext)">
            <summary>
            Exit a parse tree produced by the <c>is</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterToFactor(CQL.CQLParser.ToFactorContext)">
            <summary>
            Enter a parse tree produced by the <c>toFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitToFactor(CQL.CQLParser.ToFactorContext)">
            <summary>
            Exit a parse tree produced by the <c>toFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterComplexFactor(CQL.CQLParser.ComplexFactorContext)">
            <summary>
            Enter a parse tree produced by the <c>complexFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.factor"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitComplexFactor(CQL.CQLParser.ComplexFactorContext)">
            <summary>
            Exit a parse tree produced by the <c>complexFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.factor"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterElemSingle(CQL.CQLParser.ElemSingleContext)">
            <summary>
            Enter a parse tree produced by the <c>elemSingle</c>
            labeled alternative in <see cref="M:CQL.CQLParser.elementList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitElemSingle(CQL.CQLParser.ElemSingleContext)">
            <summary>
            Exit a parse tree produced by the <c>elemSingle</c>
            labeled alternative in <see cref="M:CQL.CQLParser.elementList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterElemList(CQL.CQLParser.ElemListContext)">
            <summary>
            Enter a parse tree produced by the <c>elemList</c>
            labeled alternative in <see cref="M:CQL.CQLParser.elementList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitElemList(CQL.CQLParser.ElemListContext)">
            <summary>
            Exit a parse tree produced by the <c>elemList</c>
            labeled alternative in <see cref="M:CQL.CQLParser.elementList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterTrue(CQL.CQLParser.TrueContext)">
            <summary>
            Enter a parse tree produced by the <c>true</c>
            labeled alternative in <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitTrue(CQL.CQLParser.TrueContext)">
            <summary>
            Exit a parse tree produced by the <c>true</c>
            labeled alternative in <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterFalse(CQL.CQLParser.FalseContext)">
            <summary>
            Enter a parse tree produced by the <c>false</c>
            labeled alternative in <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitFalse(CQL.CQLParser.FalseContext)">
            <summary>
            Exit a parse tree produced by the <c>false</c>
            labeled alternative in <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterVarExp(CQL.CQLParser.VarExpContext)">
            <summary>
            Enter a parse tree produced by the <c>varExp</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitVarExp(CQL.CQLParser.VarExpContext)">
            <summary>
            Exit a parse tree produced by the <c>varExp</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterConst(CQL.CQLParser.ConstContext)">
            <summary>
            Enter a parse tree produced by the <c>const</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitConst(CQL.CQLParser.ConstContext)">
            <summary>
            Exit a parse tree produced by the <c>const</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterPlusFactor(CQL.CQLParser.PlusFactorContext)">
            <summary>
            Enter a parse tree produced by the <c>plusFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitPlusFactor(CQL.CQLParser.PlusFactorContext)">
            <summary>
            Exit a parse tree produced by the <c>plusFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterNotFactor(CQL.CQLParser.NotFactorContext)">
            <summary>
            Enter a parse tree produced by the <c>notFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitNotFactor(CQL.CQLParser.NotFactorContext)">
            <summary>
            Exit a parse tree produced by the <c>notFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterLs(CQL.CQLParser.LsContext)">
            <summary>
            Enter a parse tree produced by the <c>ls</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitLs(CQL.CQLParser.LsContext)">
            <summary>
            Exit a parse tree produced by the <c>ls</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterMinusFactor(CQL.CQLParser.MinusFactorContext)">
            <summary>
            Enter a parse tree produced by the <c>minusFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitMinusFactor(CQL.CQLParser.MinusFactorContext)">
            <summary>
            Exit a parse tree produced by the <c>minusFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterCastFactor(CQL.CQLParser.CastFactorContext)">
            <summary>
            Enter a parse tree produced by the <c>castFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitCastFactor(CQL.CQLParser.CastFactorContext)">
            <summary>
            Exit a parse tree produced by the <c>castFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterExpr(CQL.CQLParser.ExprContext)">
            <summary>
            Enter a parse tree produced by the <c>expr</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitExpr(CQL.CQLParser.ExprContext)">
            <summary>
            Exit a parse tree produced by the <c>expr</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterQuery(CQL.CQLParser.QueryContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.query"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitQuery(CQL.CQLParser.QueryContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.query"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterExpression(CQL.CQLParser.ExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitExpression(CQL.CQLParser.ExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterIfThenElseTerm(CQL.CQLParser.IfThenElseTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitIfThenElseTerm(CQL.CQLParser.IfThenElseTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterLogicalOrTerm(CQL.CQLParser.LogicalOrTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitLogicalOrTerm(CQL.CQLParser.LogicalOrTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterLogicalAndTerm(CQL.CQLParser.LogicalAndTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitLogicalAndTerm(CQL.CQLParser.LogicalAndTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterEqualsTerm(CQL.CQLParser.EqualsTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.equalsTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitEqualsTerm(CQL.CQLParser.EqualsTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.equalsTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterCompareTerm(CQL.CQLParser.CompareTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitCompareTerm(CQL.CQLParser.CompareTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterAddTerm(CQL.CQLParser.AddTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.addTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitAddTerm(CQL.CQLParser.AddTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.addTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterMulTerm(CQL.CQLParser.MulTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitMulTerm(CQL.CQLParser.MulTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterSpecialTerm(CQL.CQLParser.SpecialTermContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitSpecialTerm(CQL.CQLParser.SpecialTermContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterFactor(CQL.CQLParser.FactorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.factor"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitFactor(CQL.CQLParser.FactorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.factor"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterChain_element(CQL.CQLParser.Chain_elementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.chain_element"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitChain_element(CQL.CQLParser.Chain_elementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.chain_element"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterPrimary(CQL.CQLParser.PrimaryContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitPrimary(CQL.CQLParser.PrimaryContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.primary"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterPrimeVar(CQL.CQLParser.PrimeVarContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.primeVar"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitPrimeVar(CQL.CQLParser.PrimeVarContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.primeVar"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterMember(CQL.CQLParser.MemberContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.member"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitMember(CQL.CQLParser.MemberContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.member"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterTypeName(CQL.CQLParser.TypeNameContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.typeName"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitTypeName(CQL.CQLParser.TypeNameContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.typeName"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterList(CQL.CQLParser.ListContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitList(CQL.CQLParser.ListContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterElementList(CQL.CQLParser.ElementListContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.elementList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitElementList(CQL.CQLParser.ElementListContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.elementList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterParameterList(CQL.CQLParser.ParameterListContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.parameterList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitParameterList(CQL.CQLParser.ParameterListContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.parameterList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterConstant(CQL.CQLParser.ConstantContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.constant"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitConstant(CQL.CQLParser.ConstantContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.constant"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterBooleanLiteral(CQL.CQLParser.BooleanLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitBooleanLiteral(CQL.CQLParser.BooleanLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterNullLiteral(CQL.CQLParser.NullLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.nullLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitNullLiteral(CQL.CQLParser.NullLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.nullLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterEmptyLiteral(CQL.CQLParser.EmptyLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CQL.CQLParser.emptyLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitEmptyLiteral(CQL.CQLParser.EmptyLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CQL.CQLParser.emptyLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CQL.CQLBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:CQL.CQLBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:CQL.CQLBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:CQL.CQLBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="T:CQL.ICQLVisitor`1">
            <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:CQL.CQLParser"/>.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitString(CQL.CQLParser.StringContext)">
            <summary>
            Visit a parse tree produced by the <c>string</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitNull(CQL.CQLParser.NullContext)">
            <summary>
            Visit a parse tree produced by the <c>null</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitBool(CQL.CQLParser.BoolContext)">
            <summary>
            Visit a parse tree produced by the <c>bool</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitDecimal(CQL.CQLParser.DecimalContext)">
            <summary>
            Visit a parse tree produced by the <c>decimal</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitEmpty(CQL.CQLParser.EmptyContext)">
            <summary>
            Visit a parse tree produced by the <c>empty</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitMinus(CQL.CQLParser.MinusContext)">
            <summary>
            Visit a parse tree produced by the <c>minus</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitPlus(CQL.CQLParser.PlusContext)">
            <summary>
            Visit a parse tree produced by the <c>plus</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitToMul(CQL.CQLParser.ToMulContext)">
            <summary>
            Visit a parse tree produced by the <c>toMul</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitArrayAccess(CQL.CQLParser.ArrayAccessContext)">
            <summary>
            Visit a parse tree produced by the <c>arrayAccess</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitMethodCall(CQL.CQLParser.MethodCallContext)">
            <summary>
            Visit a parse tree produced by the <c>methodCall</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitMemberCall(CQL.CQLParser.MemberCallContext)">
            <summary>
            Visit a parse tree produced by the <c>memberCall</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitBraceElems(CQL.CQLParser.BraceElemsContext)">
            <summary>
            Visit a parse tree produced by the <c>braceElems</c>
            labeled alternative in <see cref="M:CQL.CQLParser.list"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitBracketElems(CQL.CQLParser.BracketElemsContext)">
            <summary>
            Visit a parse tree produced by the <c>bracketElems</c>
            labeled alternative in <see cref="M:CQL.CQLParser.list"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitOr(CQL.CQLParser.OrContext)">
            <summary>
            Visit a parse tree produced by the <c>or</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitToAnd(CQL.CQLParser.ToAndContext)">
            <summary>
            Visit a parse tree produced by the <c>toAnd</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitToEquals(CQL.CQLParser.ToEqualsContext)">
            <summary>
            Visit a parse tree produced by the <c>toEquals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitAnd(CQL.CQLParser.AndContext)">
            <summary>
            Visit a parse tree produced by the <c>and</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitEquals(CQL.CQLParser.EqualsContext)">
            <summary>
            Visit a parse tree produced by the <c>equals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitNotEquals(CQL.CQLParser.NotEqualsContext)">
            <summary>
            Visit a parse tree produced by the <c>notEquals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitToCompare(CQL.CQLParser.ToCompareContext)">
            <summary>
            Visit a parse tree produced by the <c>toCompare</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitDiv(CQL.CQLParser.DivContext)">
            <summary>
            Visit a parse tree produced by the <c>div</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitMod(CQL.CQLParser.ModContext)">
            <summary>
            Visit a parse tree produced by the <c>mod</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitMul(CQL.CQLParser.MulContext)">
            <summary>
            Visit a parse tree produced by the <c>mul</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitToSpecial(CQL.CQLParser.ToSpecialContext)">
            <summary>
            Visit a parse tree produced by the <c>toSpecial</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitMemberName(CQL.CQLParser.MemberNameContext)">
            <summary>
            Visit a parse tree produced by the <c>memberName</c>
            labeled alternative in <see cref="M:CQL.CQLParser.member"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitConditional(CQL.CQLParser.ConditionalContext)">
            <summary>
            Visit a parse tree produced by the <c>conditional</c>
            labeled alternative in <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitToOr(CQL.CQLParser.ToOrContext)">
            <summary>
            Visit a parse tree produced by the <c>toOr</c>
            labeled alternative in <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitParamSingle(CQL.CQLParser.ParamSingleContext)">
            <summary>
            Visit a parse tree produced by the <c>paramSingle</c>
            labeled alternative in <see cref="M:CQL.CQLParser.parameterList"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitParamList(CQL.CQLParser.ParamListContext)">
            <summary>
            Visit a parse tree produced by the <c>paramList</c>
            labeled alternative in <see cref="M:CQL.CQLParser.parameterList"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitToAdd(CQL.CQLParser.ToAddContext)">
            <summary>
            Visit a parse tree produced by the <c>toAdd</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitLt(CQL.CQLParser.LtContext)">
            <summary>
            Visit a parse tree produced by the <c>lt</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitGte(CQL.CQLParser.GteContext)">
            <summary>
            Visit a parse tree produced by the <c>gte</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitLte(CQL.CQLParser.LteContext)">
            <summary>
            Visit a parse tree produced by the <c>lte</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitGt(CQL.CQLParser.GtContext)">
            <summary>
            Visit a parse tree produced by the <c>gt</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitContains(CQL.CQLParser.ContainsContext)">
            <summary>
            Visit a parse tree produced by the <c>contains</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitDoesNotContain(CQL.CQLParser.DoesNotContainContext)">
            <summary>
            Visit a parse tree produced by the <c>doesNotContain</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitIn(CQL.CQLParser.InContext)">
            <summary>
            Visit a parse tree produced by the <c>in</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitNotIn(CQL.CQLParser.NotInContext)">
            <summary>
            Visit a parse tree produced by the <c>notIn</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitIs(CQL.CQLParser.IsContext)">
            <summary>
            Visit a parse tree produced by the <c>is</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitToFactor(CQL.CQLParser.ToFactorContext)">
            <summary>
            Visit a parse tree produced by the <c>toFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitComplexFactor(CQL.CQLParser.ComplexFactorContext)">
            <summary>
            Visit a parse tree produced by the <c>complexFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.factor"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitElemSingle(CQL.CQLParser.ElemSingleContext)">
            <summary>
            Visit a parse tree produced by the <c>elemSingle</c>
            labeled alternative in <see cref="M:CQL.CQLParser.elementList"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitElemList(CQL.CQLParser.ElemListContext)">
            <summary>
            Visit a parse tree produced by the <c>elemList</c>
            labeled alternative in <see cref="M:CQL.CQLParser.elementList"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitTrue(CQL.CQLParser.TrueContext)">
            <summary>
            Visit a parse tree produced by the <c>true</c>
            labeled alternative in <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitFalse(CQL.CQLParser.FalseContext)">
            <summary>
            Visit a parse tree produced by the <c>false</c>
            labeled alternative in <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitVarExp(CQL.CQLParser.VarExpContext)">
            <summary>
            Visit a parse tree produced by the <c>varExp</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitConst(CQL.CQLParser.ConstContext)">
            <summary>
            Visit a parse tree produced by the <c>const</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitPlusFactor(CQL.CQLParser.PlusFactorContext)">
            <summary>
            Visit a parse tree produced by the <c>plusFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitNotFactor(CQL.CQLParser.NotFactorContext)">
            <summary>
            Visit a parse tree produced by the <c>notFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitLs(CQL.CQLParser.LsContext)">
            <summary>
            Visit a parse tree produced by the <c>ls</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitMinusFactor(CQL.CQLParser.MinusFactorContext)">
            <summary>
            Visit a parse tree produced by the <c>minusFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitCastFactor(CQL.CQLParser.CastFactorContext)">
            <summary>
            Visit a parse tree produced by the <c>castFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitExpr(CQL.CQLParser.ExprContext)">
            <summary>
            Visit a parse tree produced by the <c>expr</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitQuery(CQL.CQLParser.QueryContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.query"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitExpression(CQL.CQLParser.ExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitIfThenElseTerm(CQL.CQLParser.IfThenElseTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitLogicalOrTerm(CQL.CQLParser.LogicalOrTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitLogicalAndTerm(CQL.CQLParser.LogicalAndTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitEqualsTerm(CQL.CQLParser.EqualsTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.equalsTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitCompareTerm(CQL.CQLParser.CompareTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.compareTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitAddTerm(CQL.CQLParser.AddTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.addTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitMulTerm(CQL.CQLParser.MulTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.mulTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitSpecialTerm(CQL.CQLParser.SpecialTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.specialTerm"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitFactor(CQL.CQLParser.FactorContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.factor"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitChain_element(CQL.CQLParser.Chain_elementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.chain_element"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitPrimary(CQL.CQLParser.PrimaryContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.primary"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitPrimeVar(CQL.CQLParser.PrimeVarContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.primeVar"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitMember(CQL.CQLParser.MemberContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.member"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitTypeName(CQL.CQLParser.TypeNameContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.typeName"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitList(CQL.CQLParser.ListContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.list"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitElementList(CQL.CQLParser.ElementListContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.elementList"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitParameterList(CQL.CQLParser.ParameterListContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.parameterList"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitConstant(CQL.CQLParser.ConstantContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.constant"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitBooleanLiteral(CQL.CQLParser.BooleanLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitNullLiteral(CQL.CQLParser.NullLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.nullLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.ICQLVisitor`1.VisitEmptyLiteral(CQL.CQLParser.EmptyLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.emptyLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:CQL.CQLBaseVisitor`1">
            <summary>
            This class provides an empty implementation of <see cref="T:CQL.ICQLVisitor`1"/>,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitString(CQL.CQLParser.StringContext)">
            <summary>
            Visit a parse tree produced by the <c>string</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitNull(CQL.CQLParser.NullContext)">
            <summary>
            Visit a parse tree produced by the <c>null</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitBool(CQL.CQLParser.BoolContext)">
            <summary>
            Visit a parse tree produced by the <c>bool</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitDecimal(CQL.CQLParser.DecimalContext)">
            <summary>
            Visit a parse tree produced by the <c>decimal</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitEmpty(CQL.CQLParser.EmptyContext)">
            <summary>
            Visit a parse tree produced by the <c>empty</c>
            labeled alternative in <see cref="M:CQL.CQLParser.constant"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitMinus(CQL.CQLParser.MinusContext)">
            <summary>
            Visit a parse tree produced by the <c>minus</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitPlus(CQL.CQLParser.PlusContext)">
            <summary>
            Visit a parse tree produced by the <c>plus</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitToMul(CQL.CQLParser.ToMulContext)">
            <summary>
            Visit a parse tree produced by the <c>toMul</c>
            labeled alternative in <see cref="M:CQL.CQLParser.addTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitArrayAccess(CQL.CQLParser.ArrayAccessContext)">
            <summary>
            Visit a parse tree produced by the <c>arrayAccess</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitMethodCall(CQL.CQLParser.MethodCallContext)">
            <summary>
            Visit a parse tree produced by the <c>methodCall</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitMemberCall(CQL.CQLParser.MemberCallContext)">
            <summary>
            Visit a parse tree produced by the <c>memberCall</c>
            labeled alternative in <see cref="M:CQL.CQLParser.chain_element"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitBraceElems(CQL.CQLParser.BraceElemsContext)">
            <summary>
            Visit a parse tree produced by the <c>braceElems</c>
            labeled alternative in <see cref="M:CQL.CQLParser.list"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitBracketElems(CQL.CQLParser.BracketElemsContext)">
            <summary>
            Visit a parse tree produced by the <c>bracketElems</c>
            labeled alternative in <see cref="M:CQL.CQLParser.list"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitOr(CQL.CQLParser.OrContext)">
            <summary>
            Visit a parse tree produced by the <c>or</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitToAnd(CQL.CQLParser.ToAndContext)">
            <summary>
            Visit a parse tree produced by the <c>toAnd</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitToEquals(CQL.CQLParser.ToEqualsContext)">
            <summary>
            Visit a parse tree produced by the <c>toEquals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitAnd(CQL.CQLParser.AndContext)">
            <summary>
            Visit a parse tree produced by the <c>and</c>
            labeled alternative in <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitEquals(CQL.CQLParser.EqualsContext)">
            <summary>
            Visit a parse tree produced by the <c>equals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitNotEquals(CQL.CQLParser.NotEqualsContext)">
            <summary>
            Visit a parse tree produced by the <c>notEquals</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitToCompare(CQL.CQLParser.ToCompareContext)">
            <summary>
            Visit a parse tree produced by the <c>toCompare</c>
            labeled alternative in <see cref="M:CQL.CQLParser.equalsTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitDiv(CQL.CQLParser.DivContext)">
            <summary>
            Visit a parse tree produced by the <c>div</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitMod(CQL.CQLParser.ModContext)">
            <summary>
            Visit a parse tree produced by the <c>mod</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitMul(CQL.CQLParser.MulContext)">
            <summary>
            Visit a parse tree produced by the <c>mul</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitToSpecial(CQL.CQLParser.ToSpecialContext)">
            <summary>
            Visit a parse tree produced by the <c>toSpecial</c>
            labeled alternative in <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitMemberName(CQL.CQLParser.MemberNameContext)">
            <summary>
            Visit a parse tree produced by the <c>memberName</c>
            labeled alternative in <see cref="M:CQL.CQLParser.member"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitConditional(CQL.CQLParser.ConditionalContext)">
            <summary>
            Visit a parse tree produced by the <c>conditional</c>
            labeled alternative in <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitToOr(CQL.CQLParser.ToOrContext)">
            <summary>
            Visit a parse tree produced by the <c>toOr</c>
            labeled alternative in <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitParamSingle(CQL.CQLParser.ParamSingleContext)">
            <summary>
            Visit a parse tree produced by the <c>paramSingle</c>
            labeled alternative in <see cref="M:CQL.CQLParser.parameterList"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitParamList(CQL.CQLParser.ParamListContext)">
            <summary>
            Visit a parse tree produced by the <c>paramList</c>
            labeled alternative in <see cref="M:CQL.CQLParser.parameterList"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitToAdd(CQL.CQLParser.ToAddContext)">
            <summary>
            Visit a parse tree produced by the <c>toAdd</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitLt(CQL.CQLParser.LtContext)">
            <summary>
            Visit a parse tree produced by the <c>lt</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitGte(CQL.CQLParser.GteContext)">
            <summary>
            Visit a parse tree produced by the <c>gte</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitLte(CQL.CQLParser.LteContext)">
            <summary>
            Visit a parse tree produced by the <c>lte</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitGt(CQL.CQLParser.GtContext)">
            <summary>
            Visit a parse tree produced by the <c>gt</c>
            labeled alternative in <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitContains(CQL.CQLParser.ContainsContext)">
            <summary>
            Visit a parse tree produced by the <c>contains</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitDoesNotContain(CQL.CQLParser.DoesNotContainContext)">
            <summary>
            Visit a parse tree produced by the <c>doesNotContain</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitIn(CQL.CQLParser.InContext)">
            <summary>
            Visit a parse tree produced by the <c>in</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitNotIn(CQL.CQLParser.NotInContext)">
            <summary>
            Visit a parse tree produced by the <c>notIn</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitIs(CQL.CQLParser.IsContext)">
            <summary>
            Visit a parse tree produced by the <c>is</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitToFactor(CQL.CQLParser.ToFactorContext)">
            <summary>
            Visit a parse tree produced by the <c>toFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitComplexFactor(CQL.CQLParser.ComplexFactorContext)">
            <summary>
            Visit a parse tree produced by the <c>complexFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.factor"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitElemSingle(CQL.CQLParser.ElemSingleContext)">
            <summary>
            Visit a parse tree produced by the <c>elemSingle</c>
            labeled alternative in <see cref="M:CQL.CQLParser.elementList"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitElemList(CQL.CQLParser.ElemListContext)">
            <summary>
            Visit a parse tree produced by the <c>elemList</c>
            labeled alternative in <see cref="M:CQL.CQLParser.elementList"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitTrue(CQL.CQLParser.TrueContext)">
            <summary>
            Visit a parse tree produced by the <c>true</c>
            labeled alternative in <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitFalse(CQL.CQLParser.FalseContext)">
            <summary>
            Visit a parse tree produced by the <c>false</c>
            labeled alternative in <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitVarExp(CQL.CQLParser.VarExpContext)">
            <summary>
            Visit a parse tree produced by the <c>varExp</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitConst(CQL.CQLParser.ConstContext)">
            <summary>
            Visit a parse tree produced by the <c>const</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitPlusFactor(CQL.CQLParser.PlusFactorContext)">
            <summary>
            Visit a parse tree produced by the <c>plusFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitNotFactor(CQL.CQLParser.NotFactorContext)">
            <summary>
            Visit a parse tree produced by the <c>notFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitLs(CQL.CQLParser.LsContext)">
            <summary>
            Visit a parse tree produced by the <c>ls</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitMinusFactor(CQL.CQLParser.MinusFactorContext)">
            <summary>
            Visit a parse tree produced by the <c>minusFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitCastFactor(CQL.CQLParser.CastFactorContext)">
            <summary>
            Visit a parse tree produced by the <c>castFactor</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitExpr(CQL.CQLParser.ExprContext)">
            <summary>
            Visit a parse tree produced by the <c>expr</c>
            labeled alternative in <see cref="M:CQL.CQLParser.primary"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitQuery(CQL.CQLParser.QueryContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.query"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitExpression(CQL.CQLParser.ExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitIfThenElseTerm(CQL.CQLParser.IfThenElseTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.ifThenElseTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitLogicalOrTerm(CQL.CQLParser.LogicalOrTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.logicalOrTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitLogicalAndTerm(CQL.CQLParser.LogicalAndTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.logicalAndTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitEqualsTerm(CQL.CQLParser.EqualsTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.equalsTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitCompareTerm(CQL.CQLParser.CompareTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.compareTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitAddTerm(CQL.CQLParser.AddTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.addTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitMulTerm(CQL.CQLParser.MulTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.mulTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitSpecialTerm(CQL.CQLParser.SpecialTermContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.specialTerm"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitFactor(CQL.CQLParser.FactorContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.factor"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitChain_element(CQL.CQLParser.Chain_elementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.chain_element"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitPrimary(CQL.CQLParser.PrimaryContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.primary"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitPrimeVar(CQL.CQLParser.PrimeVarContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.primeVar"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitMember(CQL.CQLParser.MemberContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.member"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitTypeName(CQL.CQLParser.TypeNameContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.typeName"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitList(CQL.CQLParser.ListContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.list"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitElementList(CQL.CQLParser.ElementListContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.elementList"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitParameterList(CQL.CQLParser.ParameterListContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.parameterList"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitConstant(CQL.CQLParser.ConstantContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.constant"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitBooleanLiteral(CQL.CQLParser.BooleanLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.booleanLiteral"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitNullLiteral(CQL.CQLParser.NullLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.nullLiteral"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CQL.CQLBaseVisitor`1.VisitEmptyLiteral(CQL.CQLParser.EmptyLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CQL.CQLParser.emptyLiteral"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
    </members>
</doc>
